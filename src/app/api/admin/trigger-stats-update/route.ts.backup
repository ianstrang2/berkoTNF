import { NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { revalidateTag } from 'next/cache';
import { CACHE_TAGS } from '@/lib/cache/constants';

// Define the list of Edge Functions to call and their associated cache tags
// CRITICAL: call-update-power-ratings MUST run LAST to avoid historical_blocks being deleted
const FUNCTIONS_TO_CALL: Array<{ name: string; tag?: string; tags?: string[] }> = [
  { name: 'call-update-half-and-full-season-stats', tags: [CACHE_TAGS.SEASON_STATS, CACHE_TAGS.HALF_SEASON_STATS] },
  { name: 'call-update-all-time-stats', tag: CACHE_TAGS.ALL_TIME_STATS },
  { name: 'call-update-hall-of-fame', tag: CACHE_TAGS.HALL_OF_FAME },
  { name: 'call-update-recent-performance', tag: CACHE_TAGS.RECENT_PERFORMANCE },
  { name: 'call-update-season-honours-and-records', tag: CACHE_TAGS.HONOUR_ROLL },
  { name: 'call-update-match-report-cache', tag: CACHE_TAGS.MATCH_REPORT },
  { name: 'call-update-personal-bests', tag: CACHE_TAGS.PERSONAL_BESTS },
  { name: 'call-update-player-profile-stats', tag: CACHE_TAGS.PLAYER_PROFILE },
  { name: 'call-update-season-race-data', tag: CACHE_TAGS.SEASON_RACE_DATA },
  // Removed update_aggregated_player_power_rating as it's replaced by update_half_and_full_season_stats
  { name: 'call-update-power-ratings', tag: CACHE_TAGS.PLAYER_POWER_RATING } // MUST BE LAST
];

// Simplified direct cache revalidation function
function revalidateCache(tag: string): { success: boolean; error?: string } {
  try {
    console.log(`🔄 Revalidating cache tag: ${tag}`);
    revalidateTag(tag);
    console.log(`✅ Successfully revalidated tag: ${tag}`);
    return { success: true };
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    console.error(`❌ Failed to revalidate tag ${tag}:`, error);
    return { success: false, error: errorMessage };
  }
}

// Main stats update logic that can be called by both GET (cron) and POST (manual)
async function triggerStatsUpdate() {
  const supabaseUrl = process.env.SUPABASE_URL || process.env.NEXT_PUBLIC_SUPABASE_URL;
  const supabaseServiceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

  if (!supabaseUrl || !supabaseServiceRoleKey) {
    console.error('Supabase URL or Service Role Key is missing.');
    return NextResponse.json({ success: false, error: 'Server configuration error' }, { status: 500 });
  }

  const supabase = createClient(supabaseUrl, supabaseServiceRoleKey);
  const results: { function: string, status: string, revalidated?: boolean, error?: string, revalidation_error?: string }[] = [];
  let hasFailed = false;

  for (const func of FUNCTIONS_TO_CALL) {
    const startTime = Date.now();
    console.log(`🚀 Starting ${func.name}...`);

    try {
      const { error } = await supabase.functions.invoke(func.name);
      const duration = Date.now() - startTime;

      if (error) {
        console.error(`❌ ${func.name} failed after ${duration}ms:`, error);
        results.push({ function: func.name, status: 'failed', error: error.message });
        hasFailed = true;
        continue;
      }

      console.log(`✅ ${func.name} completed successfully in ${duration}ms`);
      
      // Revalidate associated cache tags
      let revalidationSuccess = true;
      let revalidationError = '';

      if (func.tags) {
        for (const tag of func.tags) {
          const result = revalidateCache(tag);
          if (!result.success) {
            revalidationSuccess = false;
            revalidationError += result.error + '; ';
          }
        }
      } else if (func.tag) {
        const result = revalidateCache(func.tag);
        if (!result.success) {
          revalidationSuccess = false;
          revalidationError = result.error || '';
        }
      }

      results.push({ 
        function: func.name, 
        status: 'success', 
        revalidated: revalidationSuccess,
        ...(revalidationError && { revalidation_error: revalidationError })
      });

    } catch (error) {
      const duration = Date.now() - startTime;
      const errorMessage = error instanceof Error ? error.message : 'Unknown error';
      console.error(`💥 ${func.name} threw an exception after ${duration}ms:`, error);
      results.push({ function: func.name, status: 'exception', error: errorMessage });
      hasFailed = true;
    }
  }

  const totalDuration = results.reduce((sum, result) => sum + (result.status === 'success' ? 1 : 0), 0);
  console.log(`📊 Stats update completed. ${totalDuration}/${FUNCTIONS_TO_CALL.length} functions succeeded`);

  return NextResponse.json({
    success: !hasFailed,
    message: hasFailed ? 'Some functions failed' : 'All functions completed successfully',
    results,
    timestamp: new Date().toISOString()
  });
}

// Handle GET requests (typically from cron jobs)
export async function GET() {
  console.log('📅 Cron-triggered stats update started');
  return await triggerStatsUpdate();
}

// Handle POST requests (typically manual triggers)
export async function POST() {
  console.log('🤚 Manual stats update triggered');
  return await triggerStatsUpdate();
} 