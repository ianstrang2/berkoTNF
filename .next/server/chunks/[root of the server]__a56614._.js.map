{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/BerkoTNF/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient({\r\n    log: ['query'],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/BerkoTNF/src/app/api/admin/matches/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/prisma';\r\n\r\n// Get matches with player details\r\nexport async function GET() {\r\n  try {\r\n    const matches = await prisma.matches.findMany({\r\n      orderBy: {\r\n        match_date: 'desc',\r\n      },\r\n      include: {\r\n        player_matches: {\r\n          include: {\r\n            players: true,  // Get player details\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    // Format the matches data\r\n    const formattedMatches = matches.map(match => ({\r\n      match_id: match.match_id,\r\n      match_date: match.match_date.toISOString(),  // Convert date to ISO format\r\n      team_a_score: match.team_a_score,\r\n      team_b_score: match.team_b_score,\r\n      created_at: match.created_at.toISOString(),  // Convert timestamp to ISO format\r\n      player_matches: match.player_matches.map(pm => ({\r\n        player_match_id: pm.player_match_id,\r\n        player_id: pm.player_id,\r\n        match_id: pm.match_id,\r\n        team: pm.team,\r\n        goals: pm.goals,\r\n        clean_sheet: pm.clean_sheet,\r\n        heavy_win: pm.heavy_win,\r\n        heavy_loss: pm.heavy_loss,\r\n        result: pm.result,\r\n        fantasy_points: pm.fantasy_points,\r\n        players: pm.players ? {\r\n          player_id: pm.players.player_id,\r\n          name: pm.players.name,\r\n          join_date: pm.players.join_date.toISOString(),  // Convert date to ISO format\r\n          is_ringer: pm.players.is_ringer,\r\n          is_retired: pm.players.is_retired,\r\n        } : null,  // Handle missing players\r\n      })),\r\n    }));\r\n\r\n    return NextResponse.json({ data: formattedMatches });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch matches', details: error },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Add a new match\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    console.log('Received request body:', body);  // Log the request body\r\n\r\n    const { match_date, team_a_score, team_b_score, players } = body;\r\n\r\n    // Calculate win/loss/clean sheet for each player\r\n    const processedPlayers = players.map(player => {\r\n      const isTeamA = player.team === 'A';\r\n      const teamScore = isTeamA ? team_a_score : team_b_score;\r\n      const opposingScore = isTeamA ? team_b_score : team_a_score;\r\n      const scoreDiff = Math.abs(team_a_score - team_b_score);\r\n\r\n      // Skip retired players\r\n      if (player.is_retired) {\r\n        return null;\r\n      }\r\n\r\n      // Calculate result-related data\r\n      const result = teamScore > opposingScore ? 'win' : (teamScore < opposingScore ? 'loss' : 'draw');\r\n\r\n      return {\r\n        player_id: parseInt(player.player_id),  // Ensure player_id is a number\r\n        team: player.team,\r\n        goals: player.goals,\r\n        clean_sheet: opposingScore === 0,\r\n        heavy_win: teamScore > opposingScore && scoreDiff >= 4,\r\n        heavy_loss: teamScore < opposingScore && scoreDiff >= 4,\r\n        result,  // Add result to be stored in the database\r\n      };\r\n    }).filter(Boolean); // Remove any null players (retired ones)\r\n\r\n    // Create match and player_matches in a transaction\r\n    const match = await prisma.$transaction(async (prisma) => {\r\n      const newMatch = await prisma.matches.create({\r\n        data: {\r\n          match_date: new Date(match_date),\r\n          team_a_score,\r\n          team_b_score,\r\n        },\r\n      });\r\n\r\n      // Create player_matches entries with result data\r\n      await prisma.player_matches.createMany({\r\n        data: processedPlayers.map(player => ({\r\n          match_id: newMatch.match_id,\r\n          ...player\r\n        })),\r\n      });\r\n\r\n      return newMatch;\r\n    });\r\n\r\n    return NextResponse.json({ data: match });\r\n  } catch (error) {\r\n    console.error('Error creating match:', error);  // Log the error\r\n    return NextResponse.json(\r\n      { error: 'Failed to create match', details: error.message },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Update a match\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { match_id, match_date, team_a_score, team_b_score, players } = body;\r\n\r\n    // Calculate win/loss/clean sheet for each player\r\n    const processedPlayers = players.map(player => {\r\n      const isTeamA = player.team === 'A';\r\n      const teamScore = isTeamA ? team_a_score : team_b_score;\r\n      const opposingScore = isTeamA ? team_b_score : team_a_score;\r\n      const scoreDiff = Math.abs(team_a_score - team_b_score);\r\n\r\n      // Skip retired players\r\n      if (player.is_retired) {\r\n        return null;\r\n      }\r\n\r\n      // Calculate result-related data\r\n      const result = teamScore > opposingScore ? 'win' : (teamScore < opposingScore ? 'loss' : 'draw');\r\n\r\n      return {\r\n        player_id: player.player_id,\r\n        team: player.team,\r\n        goals: player.goals,\r\n        clean_sheet: opposingScore === 0,\r\n        heavy_win: teamScore > opposingScore && scoreDiff >= 4,\r\n        heavy_loss: teamScore < opposingScore && scoreDiff >= 4,\r\n        result,  // Add result to be stored in the database\r\n      };\r\n    }).filter(Boolean); // Remove any null players (retired ones)\r\n\r\n    // Update match and player_matches in a transaction\r\n    const updatedMatch = await prisma.$transaction(async (prisma) => {\r\n      // Update match\r\n      const match = await prisma.matches.update({\r\n        where: { match_id },\r\n        data: {\r\n          match_date: new Date(match_date),\r\n          team_a_score,\r\n          team_b_score,\r\n        },\r\n      });\r\n\r\n      // Delete existing player_matches\r\n      await prisma.player_matches.deleteMany({\r\n        where: { match_id },\r\n      });\r\n\r\n      // Create new player_matches entries\r\n      await prisma.player_matches.createMany({\r\n        data: processedPlayers.map(player => ({\r\n          match_id,\r\n          ...player\r\n        })),\r\n      });\r\n\r\n      return match;\r\n    });\r\n\r\n    return NextResponse.json({ data: updatedMatch });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Failed to update match', details: error },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 267, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}