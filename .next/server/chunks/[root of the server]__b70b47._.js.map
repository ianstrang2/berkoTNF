{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/BerkoTNF/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient({\r\n    log: ['query'],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/BerkoTNF/src/app/api/stats/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/prisma';\r\n\r\nconst serializeData = (data) => {\r\n  return JSON.parse(JSON.stringify(data, (_, value) =>\r\n    typeof value === 'bigint' ? Number(value) : value\r\n  ));\r\n};\r\n\r\nexport async function POST(request: NextRequest) {\r\n  console.log('API route hit');\r\n  \r\n  try {\r\n    const body = await request.json();\r\n    console.log('Received request body:', body);\r\n\r\n    if (!body || !body.startDate || !body.endDate) {\r\n      console.error('Invalid request body:', body);\r\n      return NextResponse.json(\r\n        { error: 'Invalid request body - missing dates' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const { startDate, endDate } = body;\r\n    console.log('About to execute queries with dates:', startDate, endDate);\r\n\r\n    // Season Stats Query\r\n    const seasonStats = await prisma.$queryRaw`\r\n    SELECT \r\n      p.name,\r\n      COUNT(*) as games_played,\r\n      COUNT(CASE WHEN pm.result = 'win' THEN 1 END) as wins,\r\n      COUNT(CASE WHEN pm.result = 'draw' THEN 1 END) as draws,\r\n      SUM(pm.goals) as goals,\r\n      COUNT(CASE WHEN pm.heavy_win = true THEN 1 END) as heavy_wins,\r\n      COUNT(CASE WHEN pm.heavy_loss = true THEN 1 END) as heavy_losses,\r\n      COUNT(CASE \r\n        WHEN (pm.team = 'A' AND m.team_b_score = 0) OR \r\n             (pm.team = 'B' AND m.team_a_score = 0) \r\n        THEN 1 \r\n      END) as clean_sheets,\r\n      CAST(\r\n        (COUNT(CASE WHEN pm.result = 'win' THEN 1 END)::float * 100 / NULLIF(COUNT(*), 0)) \r\n        AS DECIMAL(5,1)\r\n      ) as win_percentage,\r\n      SUM(\r\n        CASE \r\n          WHEN pm.result = 'win' AND pm.heavy_win = true AND \r\n               ((pm.team = 'A' AND m.team_b_score = 0) OR (pm.team = 'B' AND m.team_a_score = 0))\r\n          THEN 40  -- Heavy Win + Clean Sheet\r\n          WHEN pm.result = 'win' AND pm.heavy_win = true \r\n          THEN 30  -- Heavy Win\r\n          WHEN pm.result = 'win' AND \r\n               ((pm.team = 'A' AND m.team_b_score = 0) OR (pm.team = 'B' AND m.team_a_score = 0))\r\n          THEN 30  -- Win + Clean Sheet\r\n          WHEN pm.result = 'win' \r\n          THEN 20  -- Win\r\n          WHEN pm.result = 'draw' AND \r\n               ((pm.team = 'A' AND m.team_b_score = 0) OR (pm.team = 'B' AND m.team_a_score = 0))\r\n          THEN 20  -- Draw + Clean Sheet\r\n          WHEN pm.result = 'draw' \r\n          THEN 10  -- Draw\r\n          WHEN pm.result = 'loss' AND pm.heavy_loss = true \r\n          THEN -20 -- Heavy Loss\r\n          WHEN pm.result = 'loss' \r\n          THEN -10 -- Loss\r\n          ELSE 0\r\n        END\r\n      ) as fantasy_points\r\n    FROM players p\r\n    JOIN player_matches pm ON p.player_id = pm.player_id\r\n    JOIN matches m ON pm.match_id = m.match_id\r\n    WHERE m.match_date >= ${startDate}::date\r\n    AND m.match_date <= ${endDate}::date\r\n    AND p.is_ringer = 'NO'\r\n    GROUP BY p.name\r\n    ORDER BY fantasy_points DESC\r\n  `;\r\n    console.log('Season stats query completed');\r\n\r\n    // Goal Stats Query with Last 5 Games\r\n    const goalStats = await prisma.$queryRaw`\r\n    WITH player_totals AS (\r\n      SELECT \r\n        p.player_id,\r\n        p.name,\r\n        SUM(pm.goals) as total_goals,\r\n        ROUND(COUNT(*) * 60.0 / NULLIF(SUM(pm.goals), 0)) as minutes_per_goal\r\n      FROM players p\r\n      JOIN player_matches pm ON p.player_id = pm.player_id\r\n      JOIN matches m ON pm.match_id = m.match_id\r\n      WHERE m.match_date >= ${startDate}::date\r\n      AND m.match_date <= ${endDate}::date\r\n      AND p.is_ringer = 'NO'\r\n      GROUP BY p.player_id, p.name\r\n      HAVING SUM(pm.goals) > 0\r\n    ),\r\n    recent_games AS (\r\n      SELECT \r\n        p.player_id,\r\n        pm.goals,\r\n        ROW_NUMBER() OVER (PARTITION BY p.player_id ORDER BY m.match_date ASC) as game_number\r\n      FROM players p\r\n      JOIN player_matches pm ON p.player_id = pm.player_id\r\n      JOIN matches m ON pm.match_id = m.match_id\r\n      WHERE m.match_date >= ${startDate}::date\r\n      AND m.match_date <= ${endDate}::date\r\n      AND p.is_ringer = 'NO'\r\n    )\r\n    SELECT \r\n      pt.*,\r\n      STRING_AGG(\r\n        CASE \r\n          WHEN rg.goals = 0 THEN ''\r\n          ELSE rg.goals::text \r\n        END,\r\n        ',' ORDER BY game_number\r\n      ) as last_five_games,\r\n      MAX(rg.goals) as max_goals_in_game\r\n    FROM player_totals pt\r\n    LEFT JOIN recent_games rg ON pt.player_id = rg.player_id AND rg.game_number <= 5\r\n    GROUP BY pt.player_id, pt.name, pt.total_goals, pt.minutes_per_goal\r\n    ORDER BY pt.total_goals DESC, pt.minutes_per_goal ASC\r\n  `;\r\n    console.log('Goal stats query completed');\r\n\r\n    // Form Data Query (Last 5 Games)\r\n    const formData = await prisma.$queryRaw`\r\n      WITH recent_games AS (\r\n        SELECT \r\n          p.player_id,\r\n          p.name,\r\n          m.match_date,\r\n          CASE \r\n            WHEN pm.result = 'win' AND pm.heavy_win = true THEN 'HW'\r\n            WHEN pm.result = 'win' THEN 'W'\r\n            WHEN pm.result = 'loss' AND pm.heavy_loss = true THEN 'HL'\r\n            WHEN pm.result = 'loss' THEN 'L'\r\n            ELSE 'D'\r\n          END as result,\r\n          ROW_NUMBER() OVER (PARTITION BY p.player_id ORDER BY m.match_date ASC) as game_number\r\n        FROM players p\r\n        JOIN player_matches pm ON p.player_id = pm.player_id\r\n        JOIN matches m ON pm.match_id = m.match_id\r\n        WHERE m.match_date >= ${startDate}::date\r\n        AND m.match_date <= ${endDate}::date\r\n        AND p.is_ringer = 'NO'\r\n      )\r\n      SELECT \r\n        name,\r\n        STRING_AGG(result, ', ' ORDER BY game_number) as last_5_games\r\n      FROM recent_games\r\n      WHERE game_number <= 5\r\n      GROUP BY player_id, name\r\n      ORDER BY name\r\n    `;\r\n    console.log('Form data query completed');\r\n\r\n    const responseData = {\r\n      data: {\r\n        seasonStats: serializeData(seasonStats),\r\n        goalStats: serializeData(goalStats),\r\n        formData: serializeData(formData)\r\n      }\r\n    };\r\n    console.log('About to send response:', responseData);\r\n\r\n    return NextResponse.json(responseData);\r\n\r\n  } catch (error) {\r\n    console.error('Detailed error:', {\r\n      message: error.message,\r\n      stack: error.stack,\r\n      name: error.name\r\n    });\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch stats', details: error instanceof Error ? error.message : 'Unknown error' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,gBAAgB,CAAC;IACrB,OAAO,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,MAAM,CAAC,GAAG,QACzC,OAAO,UAAU,WAAW,OAAO,SAAS;AAEhD;AAEO,eAAe,KAAK,OAAoB;IAC7C,QAAQ,GAAG,CAAC;IAEZ,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC,0BAA0B;QAEtC,IAAI,CAAC,QAAQ,CAAC,KAAK,SAAS,IAAI,CAAC,KAAK,OAAO,EAAE;YAC7C,QAAQ,KAAK,CAAC,yBAAyB;YACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuC,GAChD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,GAAG;QAC/B,QAAQ,GAAG,CAAC,wCAAwC,WAAW;QAE/D,qBAAqB;QACrB,MAAM,cAAc,MAAM,sHAAA,CAAA,SAAM,CAAC,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BA6CrB,EAAE,UAAU;wBACd,EAAE,QAAQ;;;;EAIhC,CAAC;QACC,QAAQ,GAAG,CAAC;QAEZ,qCAAqC;QACrC,MAAM,YAAY,MAAM,sHAAA,CAAA,SAAM,CAAC,SAAS,CAAC;;;;;;;;;;4BAUjB,EAAE,UAAU;0BACd,EAAE,QAAQ;;;;;;;;;;;;;4BAaR,EAAE,UAAU;0BACd,EAAE,QAAQ;;;;;;;;;;;;;;;;;EAiBlC,CAAC;QACC,QAAQ,GAAG,CAAC;QAEZ,iCAAiC;QACjC,MAAM,WAAW,MAAM,sHAAA,CAAA,SAAM,CAAC,SAAS,CAAC;;;;;;;;;;;;;;;;;8BAiBd,EAAE,UAAU;4BACd,EAAE,QAAQ;;;;;;;;;;IAUlC,CAAC;QACD,QAAQ,GAAG,CAAC;QAEZ,MAAM,eAAe;YACnB,MAAM;gBACJ,aAAa,cAAc;gBAC3B,WAAW,cAAc;gBACzB,UAAU,cAAc;YAC1B;QACF;QACA,QAAQ,GAAG,CAAC,2BAA2B;QAEvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;YAC/B,SAAS,MAAM,OAAO;YACtB,OAAO,MAAM,KAAK;YAClB,MAAM,MAAM,IAAI;QAClB;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAyB,SAAS,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAAgB,GACpG;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}