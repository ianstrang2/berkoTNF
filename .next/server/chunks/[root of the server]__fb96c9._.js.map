{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/football-stats-app/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient({\r\n    log: ['query'],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/football-stats-app/src/app/api/admin/players/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/prisma';\r\n\r\n// Get all players\r\nexport async function GET() {\r\n  try {\r\n    const players = await prisma.players.findMany({\r\n      orderBy: {\r\n        name: 'asc',\r\n      },\r\n    });\r\n    return NextResponse.json({ data: players });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch players', details: error },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Add a new player\r\nexport async function POST(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { name, is_ringer, is_retired } = body; // Using is_retired instead of active\r\n\r\n    const player = await prisma.players.create({\r\n      data: {\r\n        name,\r\n        is_ringer,\r\n        is_retired, // Store is_retired field\r\n        join_date: new Date(),\r\n      },\r\n    });\r\n    return NextResponse.json({ data: player });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Failed to create player', details: error },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// Update a player\r\nexport async function PUT(request: Request) {\r\n  try {\r\n    const body = await request.json();\r\n    const { player_id, name, is_ringer, is_retired } = body; // Using is_retired instead of active\r\n\r\n    const player = await prisma.players.update({\r\n      where: {\r\n        player_id: player_id,\r\n      },\r\n      data: {\r\n        name,\r\n        is_ringer,\r\n        is_retired, // Updating the is_retired field\r\n      },\r\n    });\r\n    return NextResponse.json({ data: player });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: 'Failed to update player', details: error },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,UAAU,MAAM,sHAAA,CAAA,SAAM,CAAC,OAAO,CAAC,QAAQ,CAAC;YAC5C,SAAS;gBACP,MAAM;YACR;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,MAAM;QAAQ;IAC3C,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA2B,SAAS;QAAM,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,MAAM,qCAAqC;QAEnF,MAAM,SAAS,MAAM,sHAAA,CAAA,SAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YACzC,MAAM;gBACJ;gBACA;gBACA;gBACA,WAAW,IAAI;YACjB;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,MAAM;QAAO;IAC1C,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA2B,SAAS;QAAM,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,EAAE,GAAG,MAAM,qCAAqC;QAE9F,MAAM,SAAS,MAAM,sHAAA,CAAA,SAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YACzC,OAAO;gBACL,WAAW;YACb;YACA,MAAM;gBACJ;gBACA;gBACA;YACF;QACF;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,MAAM;QAAO;IAC1C,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAA2B,SAAS;QAAM,GACnD;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 159, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}