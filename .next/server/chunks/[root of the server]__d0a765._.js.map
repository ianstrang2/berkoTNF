{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/football-stats-app/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient({\r\n    log: ['query'],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/football-stats-app/src/app/api/honourroll/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/prisma';\r\n\r\nconst serializeData = (data) => {\r\n  return JSON.parse(JSON.stringify(data, (_, value) =>\r\n    typeof value === 'bigint' ? Number(value) : value\r\n  ));\r\n};\r\n\r\nexport async function GET() {\r\n  try {\r\n    console.log('Starting honour roll data fetch...');\r\n\r\n    // Season Winners (by Fantasy Points)\r\n    const seasonWinners = await prisma.$queryRaw`\r\n      WITH yearly_stats AS (\r\n        SELECT \r\n          p.name,\r\n          EXTRACT(YEAR FROM m.match_date) as year,\r\n          SUM(CASE \r\n            WHEN pm.result = 'win' AND pm.heavy_win = true AND \r\n                ((pm.team = 'A' AND m.team_b_score = 0) OR (pm.team = 'B' AND m.team_a_score = 0))\r\n            THEN 40\r\n            WHEN pm.result = 'win' AND pm.heavy_win = true THEN 30\r\n            WHEN pm.result = 'win' AND \r\n                ((pm.team = 'A' AND m.team_b_score = 0) OR (pm.team = 'B' AND m.team_a_score = 0))\r\n            THEN 30\r\n            WHEN pm.result = 'win' THEN 20\r\n            WHEN pm.result = 'draw' THEN 10\r\n            WHEN pm.result = 'loss' AND pm.heavy_loss = true THEN -20\r\n            WHEN pm.result = 'loss' THEN -10\r\n            ELSE 0 END) as points,\r\n          COUNT(*) as games_played\r\n        FROM players p\r\n        JOIN player_matches pm ON p.player_id = pm.player_id\r\n        JOIN matches m ON pm.match_id = m.match_id\r\n        WHERE p.is_ringer = false  -- Exclude ringers\r\n        GROUP BY p.name, EXTRACT(YEAR FROM m.match_date)\r\n        HAVING COUNT(*) >= 10\r\n      )\r\n      SELECT \r\n        year::integer,\r\n        jsonb_build_object(\r\n          'winner', (SELECT name FROM yearly_stats ys2 WHERE ys2.year = ys1.year ORDER BY points DESC LIMIT 1),\r\n          'winner_points', (SELECT points FROM yearly_stats ys2 WHERE ys2.year = ys1.year ORDER BY points DESC LIMIT 1),\r\n          'runners_up', (\r\n            SELECT json_agg(json_build_object('name', name, 'points', points))\r\n            FROM (\r\n              SELECT name, points \r\n              FROM yearly_stats ys2 \r\n              WHERE ys2.year = ys1.year \r\n              ORDER BY points DESC \r\n              OFFSET 1 LIMIT 2\r\n            ) runners\r\n          )\r\n        ) as winners\r\n      FROM yearly_stats ys1\r\n      GROUP BY year\r\n      ORDER BY year DESC`;\r\n    console.log('seasonWinners data:', seasonWinners);\r\n\r\n    // Top Goalscorers by Season\r\n    const topScorers = await prisma.$queryRaw`\r\n      WITH season_goals AS (\r\n        SELECT \r\n          p.name,\r\n          EXTRACT(YEAR FROM m.match_date) as year,\r\n          SUM(pm.goals) as goals\r\n        FROM players p\r\n        JOIN player_matches pm ON p.player_id = pm.player_id\r\n        JOIN matches m ON pm.match_id = m.match_id\r\n        WHERE p.is_ringer = false  -- Exclude ringers\r\n        GROUP BY p.name, EXTRACT(YEAR FROM m.match_date)\r\n        HAVING SUM(pm.goals) > 0\r\n      )\r\n      SELECT \r\n        year::integer,\r\n        jsonb_build_object(\r\n          'winner', (SELECT name FROM season_goals sg2 WHERE sg2.year = sg1.year ORDER BY goals DESC LIMIT 1),\r\n          'winner_goals', (SELECT goals FROM season_goals sg2 WHERE sg2.year = sg1.year ORDER BY goals DESC LIMIT 1),\r\n          'runners_up', (\r\n            SELECT json_agg(json_build_object('name', name, 'goals', goals))\r\n            FROM (\r\n              SELECT name, goals \r\n              FROM season_goals sg2 \r\n              WHERE sg2.year = sg1.year \r\n              ORDER BY goals DESC \r\n              OFFSET 1 LIMIT 2\r\n            ) runners\r\n          )\r\n        ) as scorers\r\n      FROM season_goals sg1\r\n      GROUP BY year\r\n      ORDER BY year DESC`;\r\n    console.log('topScorers data:', topScorers);\r\n\r\n    // Record Holders\r\n    const records = await prisma.$queryRaw`\r\n      WITH \r\n        game_goals AS (\r\n          SELECT \r\n            p.name,\r\n            m.match_date,\r\n            pm.goals,\r\n            m.team_a_score,\r\n            m.team_b_score,\r\n            pm.team,\r\n            ROW_NUMBER() OVER (ORDER BY pm.goals DESC) as rn\r\n          FROM players p\r\n          JOIN player_matches pm ON p.player_id = pm.player_id\r\n          JOIN matches m ON pm.match_id = m.match_id\r\n          WHERE pm.goals > 0 AND p.is_ringer = false  -- Exclude ringers\r\n        ),\r\n        consecutive_goals AS (\r\n          WITH player_matches_with_gaps AS (\r\n            SELECT \r\n              p.name,\r\n              m.match_date,\r\n              pm.goals,\r\n              CASE WHEN pm.goals > 0 THEN 1 ELSE 0 END as scored,\r\n              LAG(CASE WHEN pm.goals > 0 THEN 1 ELSE 0 END) OVER (PARTITION BY p.player_id ORDER BY m.match_date) as prev_scored\r\n            FROM players p\r\n            JOIN player_matches pm ON p.player_id = pm.player_id\r\n            JOIN matches m ON pm.match_id = m.match_id\r\n            WHERE p.is_ringer = false  -- Exclude ringers\r\n            ORDER BY p.player_id, m.match_date\r\n          ),\r\n          streaks AS (\r\n            SELECT \r\n              name,\r\n              match_date,\r\n              CASE \r\n                WHEN scored = 1 AND (prev_scored = 0 OR prev_scored IS NULL) \r\n                THEN 1 \r\n                ELSE 0 \r\n              END as streak_start,\r\n              scored\r\n            FROM player_matches_with_gaps\r\n          ),\r\n          numbered_streaks AS (\r\n            SELECT \r\n              name,\r\n              match_date,\r\n              scored,\r\n              SUM(streak_start) OVER (ORDER BY name, match_date) as streak_group\r\n            FROM streaks\r\n            WHERE scored = 1\r\n          )\r\n          SELECT \r\n            name,\r\n            COUNT(*) as streak,\r\n            MIN(match_date) as streak_start,\r\n            MAX(match_date) as streak_end\r\n          FROM numbered_streaks\r\n          GROUP BY name, streak_group\r\n          ORDER BY COUNT(*) DESC\r\n          LIMIT 1\r\n        ),\r\n        streaks AS (\r\n          WITH numbered_matches AS (\r\n            SELECT \r\n              p.name,\r\n              m.match_date,\r\n              pm.result,\r\n              ROW_NUMBER() OVER (PARTITION BY p.player_id ORDER BY m.match_date) as match_num\r\n            FROM players p\r\n            JOIN player_matches pm ON p.player_id = pm.player_id\r\n            JOIN matches m ON pm.match_id = m.match_id\r\n            WHERE p.is_ringer = false  -- Exclude ringers\r\n          ),\r\n          win_gaps AS (\r\n            SELECT \r\n              name,\r\n              match_date,\r\n              result,\r\n              match_num,\r\n              match_num - ROW_NUMBER() OVER (PARTITION BY name, result ORDER BY match_date) as grp\r\n            FROM numbered_matches\r\n            WHERE result = 'win'\r\n          ),\r\n          loss_gaps AS (\r\n            SELECT \r\n              name,\r\n              match_date,\r\n              result,\r\n              match_num,\r\n              match_num - ROW_NUMBER() OVER (PARTITION BY name, result ORDER BY match_date) as grp\r\n            FROM numbered_matches\r\n            WHERE result = 'loss'\r\n          ),\r\n          no_win_gaps AS (\r\n            SELECT \r\n              name,\r\n              match_date,\r\n              result,\r\n              match_num,\r\n              match_num - ROW_NUMBER() OVER (PARTITION BY name ORDER BY match_date) as grp\r\n            FROM numbered_matches\r\n            WHERE result != 'win'\r\n          ),\r\n          undefeated_gaps AS (\r\n            SELECT \r\n              name,\r\n              match_date,\r\n              result,\r\n              match_num,\r\n              match_num - ROW_NUMBER() OVER (PARTITION BY name ORDER BY match_date) as grp\r\n            FROM numbered_matches\r\n            WHERE result != 'loss'\r\n          )\r\n          SELECT \r\n            type,\r\n            name,\r\n            COUNT(*) as streak,\r\n            MIN(match_date) as streak_start,\r\n            MAX(match_date) as streak_end\r\n          FROM (\r\n            SELECT 'Win Streak' as type, name, match_date, match_num, grp FROM win_gaps\r\n            UNION ALL\r\n            SELECT 'Loss Streak' as type, name, match_date, match_num, grp FROM loss_gaps\r\n            UNION ALL\r\n            SELECT 'No Win Streak' as type, name, match_date, match_num, grp FROM no_win_gaps\r\n            UNION ALL\r\n            SELECT 'Undefeated Streak' as type, name, match_date, match_num, grp FROM undefeated_gaps\r\n          ) all_streaks\r\n          GROUP BY type, name, grp\r\n          HAVING COUNT(*) >= 3\r\n        )\r\n      SELECT \r\n        jsonb_build_object(\r\n          'most_goals_in_game', (\r\n            SELECT jsonb_build_object(\r\n              'name', name,\r\n              'goals', goals,\r\n              'date', match_date::text,\r\n              'score', CASE \r\n                WHEN team = 'A' THEN team_a_score || '-' || team_b_score\r\n                ELSE team_b_score || '-' || team_a_score\r\n              END\r\n            )\r\n            FROM game_goals\r\n            WHERE rn = 1\r\n          ),\r\n          'streaks', (\r\n            SELECT jsonb_object_agg(\r\n              type,\r\n              jsonb_build_object(\r\n                'name', name,\r\n                'streak', streak,\r\n                'start_date', streak_start::text,\r\n                'end_date', streak_end::text\r\n              )\r\n            )\r\n            FROM (\r\n              SELECT DISTINCT ON (type)\r\n                type, name, streak, streak_start, streak_end\r\n              FROM streaks\r\n              ORDER BY type, streak DESC\r\n            ) s\r\n          ),\r\n          'consecutive_goals', (\r\n            SELECT jsonb_build_object(\r\n              'name', name,\r\n              'streak', streak,\r\n              'start_date', streak_start::text,\r\n              'end_date', streak_end::text\r\n            )\r\n            FROM consecutive_goals\r\n          )\r\n        ) as records`;\r\n    console.log('records data:', records);\r\n\r\n    const response = { \r\n      data: {\r\n        seasonWinners: serializeData(seasonWinners),\r\n        topScorers: serializeData(topScorers),\r\n        records: serializeData(records)\r\n      }\r\n    };\r\n    console.log('Final response:', response);\r\n\r\n    return NextResponse.json(response);\r\n\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch honour roll data', details: error },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,gBAAgB,CAAC;IACrB,OAAO,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,MAAM,CAAC,GAAG,QACzC,OAAO,UAAU,WAAW,OAAO,SAAS;AAEhD;AAEO,eAAe;IACpB,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,qCAAqC;QACrC,MAAM,gBAAgB,MAAM,sHAAA,CAAA,SAAM,CAAC,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBA4CzB,CAAC;QACrB,QAAQ,GAAG,CAAC,uBAAuB;QAEnC,4BAA4B;QAC5B,MAAM,aAAa,MAAM,sHAAA,CAAA,SAAM,CAAC,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBA+BtB,CAAC;QACrB,QAAQ,GAAG,CAAC,oBAAoB;QAEhC,iBAAiB;QACjB,MAAM,UAAU,MAAM,sHAAA,CAAA,SAAM,CAAC,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oBA4KvB,CAAC;QACjB,QAAQ,GAAG,CAAC,iBAAiB;QAE7B,MAAM,WAAW;YACf,MAAM;gBACJ,eAAe,cAAc;gBAC7B,YAAY,cAAc;gBAC1B,SAAS,cAAc;YACzB;QACF;QACA,QAAQ,GAAG,CAAC,mBAAmB;QAE/B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAE3B,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;YAAoC,SAAS;QAAM,GAC5D;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 369, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}