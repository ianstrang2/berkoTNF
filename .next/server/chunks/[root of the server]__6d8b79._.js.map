{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/football-stats-app/src/app/api/playerprofile/route.ts"],"sourcesContent":["export async function GET(request: Request) {\r\n  try {\r\n    console.log(\"Testing win/loss streak query...\");\r\n\r\n    const { searchParams } = new URL(request.url);\r\n    const id = searchParams.get('id');\r\n\r\n    if (!id) {\r\n      console.error(\"Error: No ID provided in request\");\r\n      return NextResponse.json({ error: 'No ID provided' }, { status: 400 });\r\n    }\r\n\r\n    const numericId = parseInt(id, 10);\r\n    console.log('Fetching win/loss streaks for ID:', numericId);\r\n\r\n    const playerStats = await prisma.$queryRaw`\r\n      WITH streaks AS (\r\n        WITH numbered_matches AS (\r\n          SELECT \r\n            pm.player_id,\r\n            m.match_date,\r\n            pm.result,\r\n            ROW_NUMBER() OVER (PARTITION BY pm.player_id ORDER BY m.match_date) as match_num\r\n          FROM player_matches pm\r\n          JOIN matches m ON pm.match_id = m.match_id\r\n          WHERE pm.player_id = ${numericId}\r\n        ),\r\n        win_gaps AS (\r\n          SELECT \r\n            player_id,\r\n            match_date,\r\n            match_num,\r\n            match_num - ROW_NUMBER() OVER (ORDER BY match_date) as grp\r\n          FROM numbered_matches\r\n          WHERE result = 'win'\r\n        ),\r\n        undefeated_gaps AS (\r\n          SELECT \r\n            player_id,\r\n            match_date,\r\n            match_num,\r\n            match_num - ROW_NUMBER() OVER (ORDER BY match_date) as grp\r\n          FROM numbered_matches\r\n          WHERE result != 'loss'\r\n        )\r\n        SELECT \r\n          player_id,\r\n          MAX(win_streak.streak) as win_streak,\r\n          MIN(win_streak.start_date)::text as win_streak_start,\r\n          MAX(win_streak.end_date)::text as win_streak_end,\r\n          MAX(undefeated_streak.streak) as undefeated_streak,\r\n          MIN(undefeated_streak.start_date)::text as undefeated_streak_start,\r\n          MAX(undefeated_streak.end_date)::text as undefeated_streak_end\r\n        FROM (\r\n          SELECT \r\n            player_id,\r\n            COUNT(*) as streak,\r\n            MIN(match_date) as start_date,\r\n            MAX(match_date) as end_date\r\n          FROM win_gaps\r\n          GROUP BY player_id, grp\r\n        ) win_streak\r\n        CROSS JOIN (\r\n          SELECT \r\n            player_id,\r\n            COUNT(*) as streak,\r\n            MIN(match_date) as start_date,\r\n            MAX(match_date) as end_date\r\n          FROM undefeated_gaps\r\n          GROUP BY player_id, grp\r\n        ) undefeated_streak\r\n        GROUP BY player_id\r\n      )\r\n      SELECT * FROM streaks\r\n    `;\r\n\r\n    console.log('Win/Loss Streak Data:', playerStats);\r\n\r\n    if (!playerStats || playerStats.length === 0 || playerStats[0] === null) {\r\n      console.warn('No player stats found for ID:', numericId);\r\n      return NextResponse.json({ error: 'Player not found' }, { status: 404 });\r\n    }\r\n\r\n    return NextResponse.json({ profile: playerStats[0] });\r\n\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n\r\n    // Fixed the syntax issue in error handling\r\n    return NextResponse.json({\r\n      error: 'Failed to fetch player profile',\r\n      details: error?.message || 'Unknown error occurred'\r\n    }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;AAAO,eAAe,IAAI,OAAgB;IACxC,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,QAAQ,GAAG;QAC5C,MAAM,KAAK,aAAa,GAAG,CAAC;QAE5B,IAAI,CAAC,IAAI;YACP,QAAQ,KAAK,CAAC;YACd,OAAO,aAAa,IAAI,CAAC;gBAAE,OAAO;YAAiB,GAAG;gBAAE,QAAQ;YAAI;QACtE;QAEA,MAAM,YAAY,SAAS,IAAI;QAC/B,QAAQ,GAAG,CAAC,qCAAqC;QAEjD,MAAM,cAAc,MAAM,OAAO,SAAS,CAAC;;;;;;;;;;+BAUhB,EAAE,UAAU;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiDvC,CAAC;QAED,QAAQ,GAAG,CAAC,yBAAyB;QAErC,IAAI,CAAC,eAAe,YAAY,MAAM,KAAK,KAAK,WAAW,CAAC,EAAE,KAAK,MAAM;YACvE,QAAQ,IAAI,CAAC,iCAAiC;YAC9C,OAAO,aAAa,IAAI,CAAC;gBAAE,OAAO;YAAmB,GAAG;gBAAE,QAAQ;YAAI;QACxE;QAEA,OAAO,aAAa,IAAI,CAAC;YAAE,SAAS,WAAW,CAAC,EAAE;QAAC;IAErD,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QAEjC,2CAA2C;QAC3C,OAAO,aAAa,IAAI,CAAC;YACvB,OAAO;YACP,SAAS,OAAO,WAAW;QAC7B,GAAG;YAAE,QAAQ;QAAI;IACnB;AACF"}},
    {"offset": {"line": 148, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}