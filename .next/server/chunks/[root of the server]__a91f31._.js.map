{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/football-stats-app/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient({\r\n    log: ['query'],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/football-stats-app/src/app/api/players/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/prisma';\r\n\r\nconst serializeData = (data) => {\r\n  return JSON.parse(JSON.stringify(data, (_, value) =>\r\n    typeof value === 'bigint' ? Number(value) : value\r\n  ));\r\n};\r\n\r\n// Add caching headers to prevent multiple requests\r\nexport const dynamic = 'force-dynamic'; // defaults to force-static\r\nexport const revalidate = 30; // revalidate the data at most every 30 seconds\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const cacheKey = 'players-list';\r\n    \r\n    // Try to get from cache first\r\n    const cached = await prisma.$queryRaw`\r\n      SELECT DISTINCT \r\n        players.player_id as id,\r\n        players.name\r\n      FROM players\r\n      ORDER BY name ASC\r\n    `;\r\n\r\n    const response = NextResponse.json({ \r\n      data: serializeData(cached)\r\n    });\r\n\r\n    // Add cache control headers\r\n    response.headers.set('Cache-Control', 'public, s-maxage=30, stale-while-revalidate=59');\r\n    \r\n    return response;\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch players' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEA,MAAM,gBAAgB,CAAC;IACrB,OAAO,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,MAAM,CAAC,GAAG,QACzC,OAAO,UAAU,WAAW,OAAO,SAAS;AAEhD;AAGO,MAAM,UAAU,iBAAiB,2BAA2B;AAC5D,MAAM,aAAa,IAAI,+CAA+C;AAEtE,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,WAAW;QAEjB,8BAA8B;QAC9B,MAAM,SAAS,MAAM,sHAAA,CAAA,SAAM,CAAC,SAAS,CAAC;;;;;;IAMtC,CAAC;QAED,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACjC,MAAM,cAAc;QACtB;QAEA,4BAA4B;QAC5B,SAAS,OAAO,CAAC,GAAG,CAAC,iBAAiB;QAEtC,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA0B,GACnC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}