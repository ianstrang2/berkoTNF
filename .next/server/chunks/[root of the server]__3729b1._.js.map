{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/football-stats-app/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst globalForPrisma = global as unknown as { prisma: PrismaClient }\r\n\r\nexport const prisma =\r\n  globalForPrisma.prisma ||\r\n  new PrismaClient({\r\n    log: ['query'],\r\n  })\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,kBAAkB;AAEjB,MAAM,SACX,gBAAgB,MAAM,IACtB,IAAI,6HAAA,CAAA,eAAY,CAAC;IACf,KAAK;QAAC;KAAQ;AAChB;AAEF,wCAA2C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 81, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Ian/football-stats-app/src/app/api/allTimeStats/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { prisma } from '@/lib/prisma';\r\n\r\nconst serializeData = (data) => {\r\n  return JSON.parse(JSON.stringify(data, (_, value) =>\r\n    typeof value === 'bigint' ? Number(value) : value\r\n  ));\r\n};\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    const allTimeStats = await prisma.$queryRaw`\r\n      WITH player_stats AS (\r\n        SELECT \r\n          p.name,\r\n          p.is_retired,\r\n          COUNT(*) as games_played,\r\n          COUNT(CASE WHEN pm.result = 'win' THEN 1 END) as wins,\r\n          COUNT(CASE WHEN pm.result = 'draw' THEN 1 END) as draws,\r\n          COUNT(CASE WHEN pm.result = 'loss' THEN 1 END) as losses,\r\n          SUM(pm.goals) as goals,\r\n          CAST(COUNT(CASE WHEN pm.result = 'win' THEN 1 END)::float * 100 / COUNT(*) AS DECIMAL(5,1)) as win_percentage,\r\n          ROUND(COUNT(*) * 60.0 / NULLIF(SUM(pm.goals), 0), 1) as minutes_per_goal,\r\n          COUNT(CASE WHEN pm.heavy_win = true THEN 1 END) as heavy_wins,\r\n          CAST(COUNT(CASE WHEN pm.heavy_win = true THEN 1 END)::float * 100 / COUNT(*) AS DECIMAL(5,1)) as heavy_win_percentage,\r\n          COUNT(CASE WHEN pm.heavy_loss = true THEN 1 END) as heavy_losses,\r\n          CAST(COUNT(CASE WHEN pm.heavy_loss = true THEN 1 END)::float * 100 / COUNT(*) AS DECIMAL(5,1)) as heavy_loss_percentage,\r\n          COUNT(CASE WHEN (pm.team = 'A' AND m.team_b_score = 0) OR (pm.team = 'B' AND m.team_a_score = 0) THEN 1 END) as clean_sheets,\r\n          CAST(COUNT(CASE WHEN (pm.team = 'A' AND m.team_b_score = 0) OR (pm.team = 'B' AND m.team_a_score = 0) THEN 1 END)::float * 100 / COUNT(*) AS DECIMAL(5,1)) as clean_sheet_percentage,\r\n          SUM(\r\n            CASE \r\n              WHEN pm.result = 'win' AND pm.heavy_win = true AND \r\n                   ((pm.team = 'A' AND m.team_b_score = 0) OR (pm.team = 'B' AND m.team_a_score = 0))\r\n              THEN 40\r\n              WHEN pm.result = 'win' AND pm.heavy_win = true THEN 30\r\n              WHEN pm.result = 'win' AND \r\n                   ((pm.team = 'A' AND m.team_b_score = 0) OR (pm.team = 'B' AND m.team_a_score = 0))\r\n              THEN 30\r\n              WHEN pm.result = 'win' THEN 20\r\n              WHEN pm.result = 'draw' AND \r\n                   ((pm.team = 'A' AND m.team_b_score = 0) OR (pm.team = 'B' AND m.team_a_score = 0))\r\n              THEN 20\r\n              WHEN pm.result = 'draw' THEN 10\r\n              WHEN pm.result = 'loss' AND pm.heavy_loss = true THEN -20\r\n              WHEN pm.result = 'loss' THEN -10\r\n              ELSE 0\r\n            END\r\n          ) as fantasy_points\r\n        FROM players p\r\n        JOIN player_matches pm ON p.player_id = pm.player_id\r\n        JOIN matches m ON pm.match_id = m.match_id\r\n        WHERE p.is_ringer = false\r\n        GROUP BY p.name, p.is_retired\r\n        HAVING COUNT(*) >= 50\r\n      )\r\n      SELECT \r\n        *,\r\n        ROUND(fantasy_points::numeric / games_played, 1) as points_per_game\r\n      FROM player_stats\r\n      ORDER BY fantasy_points DESC\r\n    `;\r\n\r\n    return NextResponse.json({ \r\n      data: serializeData(allTimeStats)\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('Database Error:', error);\r\n    return NextResponse.json(\r\n      { error: 'Failed to fetch stats' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,gBAAgB,CAAC;IACrB,OAAO,KAAK,KAAK,CAAC,KAAK,SAAS,CAAC,MAAM,CAAC,GAAG,QACzC,OAAO,UAAU,WAAW,OAAO,SAAS;AAEhD;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,MAAM,eAAe,MAAM,sHAAA,CAAA,SAAM,CAAC,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAiD5C,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,MAAM,cAAc;QACtB;IAEF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,mBAAmB;QACjC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}