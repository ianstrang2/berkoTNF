generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model aggregated_all_time_stats {
  id                     Int      @id @default(autoincrement())
  player_id              Int
  games_played           Int
  wins                   Int
  draws                  Int
  losses                 Int
  goals                  Int
  win_percentage         Decimal  @db.Decimal(10, 1)
  minutes_per_goal       Decimal? @db.Decimal(10, 1)
  heavy_wins             Int
  heavy_win_percentage   Decimal  @db.Decimal(10, 1)
  heavy_losses           Int
  heavy_loss_percentage  Decimal  @db.Decimal(10, 1)
  clean_sheets           Int
  clean_sheet_percentage Decimal  @db.Decimal(10, 1)
  fantasy_points         Decimal  @db.Decimal(10, 1)
  points_per_game        Decimal  @db.Decimal(10, 1)
  name                   String?  @db.VarChar(14)
  is_retired             Boolean?
  selected_club          Json?
  last_updated           DateTime @default(now()) @db.Timestamptz(6)
  tenant_id              String   @db.Uuid
  players                players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  tenants                tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_all_time_stats_tenant")

  @@unique([tenant_id, player_id], map: "unique_all_time_stats_per_tenant")
  @@index([tenant_id, player_id], map: "idx_aggregated_all_time_stats_tenant_player")
}

model aggregated_half_season_stats {
  id                Int       @id @default(autoincrement())
  player_id         Int?
  games_played      Int?
  wins              Int?
  draws             Int?
  losses            Int?
  goals             Int?
  heavy_wins        Int?
  heavy_losses      Int?
  clean_sheets      Int?
  win_percentage    Decimal?  @db.Decimal(10, 1)
  fantasy_points    Int?
  points_per_game   Decimal?  @db.Decimal(10, 1)
  name              String?   @db.VarChar(14)
  selected_club     Json?
  last_updated      DateTime? @default(now()) @db.Timestamptz(6)
  historical_blocks Json?     @default("[]")
  tenant_id         String    @db.Uuid
  tenants           tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_half_season_stats_tenant")
  players           players?  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_player")

  @@unique([tenant_id, player_id], map: "unique_half_season_stats_per_tenant")
  @@index([player_id], map: "idx_agg_half_season_stats_player_id")
}

model aggregated_hall_of_fame {
  id           Int      @id @default(autoincrement())
  category     String   @db.VarChar(50)
  player_id    Int
  value        Decimal  @db.Decimal(10, 2)
  selected_club Json?
  last_updated DateTime @default(now()) @db.Timestamptz(6)
  tenant_id    String   @db.Uuid
  players      players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  tenants      tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_hall_of_fame_tenant")

  @@unique([tenant_id, category, player_id], map: "unique_hall_of_fame_per_tenant")
  @@index([category], map: "idx_agg_hall_of_fame_category")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model aggregated_match_report {
  match_id                    Int       @id
  match_date                  DateTime? @db.Timestamptz(6)
  team_a_score                Int?
  team_b_score                Int?
  team_a_players              Json?
  team_b_players              Json?
  team_a_scorers              String?
  team_b_scorers              String?
  game_milestones             Json?
  goal_milestones             Json?
  config_values               Json?
  last_updated                DateTime? @default(now()) @db.Timestamptz(6)
  half_season_goal_leaders    Json?
  half_season_fantasy_leaders Json?
  season_goal_leaders         Json?
  season_fantasy_leaders      Json?
  on_fire_player_id           Int?
  grim_reaper_player_id       Int?
  feat_breaking_data          Json      @default("[]")
  streaks                     Json?     @default("[]")
  goal_streaks                Json?     @default("[]")
  tenant_id                   String    @db.Uuid
  tenants                     tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_match_report_tenant")

  @@index([feat_breaking_data], map: "idx_aggregated_match_report_feat_breaking", type: Gin)
}

model aggregated_match_streaks {
  player_id                                                                        Int       @id
  name                                                                             String?   @db.VarChar(255)
  current_win_streak                                                               Int?
  current_unbeaten_streak                                                          Int?
  current_winless_streak                                                           Int?
  current_loss_streak                                                              Int?
  current_scoring_streak                                                           Int?
  goals_in_scoring_streak                                                          Int?
  half_season_goals                                                                Int?
  half_season_fantasy_points                                                       Int?
  season_goals                                                                     Int?
  season_fantasy_points                                                            Int?
  config_values                                                                    Json?
  last_updated                                                                     DateTime? @default(now()) @db.Timestamptz(6)
  half_season_goals_rank                                                           Int?
  half_season_fantasy_rank                                                         Int?
  season_goals_rank                                                                Int?
  season_fantasy_rank                                                              Int?
  previous_half_season_goals                                                       Int?
  previous_half_season_fantasy                                                     Int?
  previous_season_goals                                                            Int?
  previous_season_fantasy                                                          Int?
  half_season_goals_status                                                         String?   @db.VarChar(20)
  half_season_fantasy_status                                                       String?   @db.VarChar(20)
  season_goals_status                                                              String?   @db.VarChar(20)
  season_fantasy_status                                                            String?   @db.VarChar(20)
  previous_half_season_goals_leader_id                                             Int?
  previous_half_season_fantasy_leader_id                                           Int?
  previous_season_goals_leader_id                                                  Int?
  previous_season_fantasy_leader_id                                                Int?
  tenant_id                                                                        String    @db.Uuid
  players_aggregated_match_streaks_player_idToplayers                              players   @relation("aggregated_match_streaks_player_idToplayers", fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  tenants                                                                          tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_match_streaks_tenant")
  players_aggregated_match_streaks_previous_half_season_fantasy_leader_idToplayers players?  @relation("aggregated_match_streaks_previous_half_season_fantasy_leader_idToplayers", fields: [previous_half_season_fantasy_leader_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_previous_half_season_fantasy_leader")
  players_aggregated_match_streaks_previous_half_season_goals_leader_idToplayers   players?  @relation("aggregated_match_streaks_previous_half_season_goals_leader_idToplayers", fields: [previous_half_season_goals_leader_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_previous_half_season_goals_leader")
  players_aggregated_match_streaks_previous_season_fantasy_leader_idToplayers      players?  @relation("aggregated_match_streaks_previous_season_fantasy_leader_idToplayers", fields: [previous_season_fantasy_leader_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_previous_season_fantasy_leader")
  players_aggregated_match_streaks_previous_season_goals_leader_idToplayers        players?  @relation("aggregated_match_streaks_previous_season_goals_leader_idToplayers", fields: [previous_season_goals_leader_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction, map: "fk_previous_season_goals_leader")

  @@index([half_season_fantasy_rank], map: "idx_ams_half_season_fantasy_rank")
  @@index([half_season_goals_rank], map: "idx_ams_half_season_goals_rank")
  @@index([season_fantasy_rank], map: "idx_ams_season_fantasy_rank")
  @@index([season_goals_rank], map: "idx_ams_season_goals_rank")
}

model aggregated_performance_ratings {
  player_id                Int       @id
  power_rating             Decimal   @db.Decimal(10, 3)
  goal_threat              Decimal   @db.Decimal(10, 3)
  participation            Decimal   @db.Decimal(5, 1)
  weighted_played          Decimal   @db.Decimal(10, 3)
  weighted_available       Decimal   @db.Decimal(10, 3)
  is_qualified             Boolean
  power_percentile         Decimal?  @default(50) @db.Decimal(5, 1)
  goal_percentile          Decimal?  @default(50) @db.Decimal(5, 1)
  participation_percentile Decimal?  @default(50) @db.Decimal(5, 1)
  first_match_date         DateTime? @db.Date
  name                     String?   @db.VarChar(14)
  is_retired               Boolean?
  is_ringer                Boolean?
  selected_club            Json?
  updated_at               DateTime? @default(now()) @db.Timestamptz(6)
  tenant_id                String    @db.Uuid
  players                  players   @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  tenants                  tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_performance_ratings_tenant")

  @@index([tenant_id, is_qualified, power_rating(sort: Desc)], map: "idx_aggregated_performance_ratings_tenant_qualified")
  @@index([power_rating(sort: Desc)], map: "idx_performance_ratings_power_desc")
  @@index([is_qualified, power_rating(sort: Desc)], map: "idx_performance_ratings_qualified")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model aggregated_personal_bests {
  match_id        Int      @id
  broken_pbs_data Json
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)
  tenant_id       String   @db.Uuid
  tenants         tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_personal_bests_tenant")
  matches         matches  @relation(fields: [match_id], references: [match_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_match")

  @@unique([match_id, tenant_id], map: "aggregated_personal_bests_match_tenant_unique")
}

model aggregated_player_power_ratings {
  player_id                Int      @id
  rating                   Decimal  @db.Decimal
  variance                 Decimal  @db.Decimal
  effective_games          Decimal  @db.Decimal
  updated_at               DateTime @default(now()) @db.Timestamptz(6)
  goal_threat              Decimal? @db.Decimal
  trend_rating             Decimal? @db.Decimal
  trend_goal_threat        Decimal? @db.Decimal
  league_avg_goal_threat   Decimal? @db.Decimal
  trend_participation      Decimal? @db.Decimal
  league_avg_participation Decimal? @db.Decimal
  power_rating_percentile  Float?   @default(0) @db.Real
  goal_threat_percentile   Float?   @default(0) @db.Real
  participation_percentile Float?   @default(0) @db.Real
  tenant_id                String   @db.Uuid
  players                  players  @relation(fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  tenants                  tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_player_power_ratings_tenant")

  @@index([tenant_id, rating(sort: Desc)], map: "idx_aggregated_player_power_ratings_tenant_rating")
  @@index([rating(sort: Desc)], map: "idx_power_rating_desc")
}

model aggregated_player_profile_stats {
  player_id               Int      @id
  name                    String?
  games_played            Int?     @default(0)
  fantasy_points          Int?     @default(0)
  most_game_goals         Int?
  most_game_goals_date    String?
  most_season_goals       Int?
  most_season_goals_year  String?
  win_streak              Int?     @default(0)
  win_streak_dates        String?
  losing_streak           Int?     @default(0)
  losing_streak_dates     String?
  undefeated_streak       Int?     @default(0)
  undefeated_streak_dates String?
  winless_streak          Int?     @default(0)
  winless_streak_dates    String?
  attendance_streak       Int?     @default(0)
  selected_club           Json?
  yearly_stats            Json?    @default("[]")
  last_updated            DateTime @default(now()) @db.Timestamptz(6)
  attendance_streak_dates String?
  scoring_streak          Int?     @default(0)
  scoring_streak_dates    String?
  teammate_chemistry_all  Json?    @default("[]") @db.Json
  tenant_id               String   @db.Uuid
  players                 players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  tenants                 tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_player_profile_stats_tenant")
}

model aggregated_player_teammate_stats {
  player_id              Int       @id
  teammate_chemistry_all Json?     @default("[]")
  last_updated           DateTime? @default(now()) @db.Timestamptz(6)
  tenant_id              String    @db.Uuid
  players                players   @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  tenants                tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_player_teammate_stats_tenant")
}

model aggregated_recent_performance {
  player_id    Int       @id
  last_5_games Json?
  last_5_goals Int?
  last_updated DateTime? @default(now()) @db.Timestamptz(6)
  tenant_id    String    @db.Uuid
  players      players   @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  tenants      tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_recent_performance_tenant")
}

model aggregated_records {
  id           Int       @id @default(autoincrement())
  records      Json?
  last_updated DateTime? @default(now()) @db.Timestamptz(6)
  tenant_id    String    @db.Uuid
  tenants      tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_records_tenant")
}

model aggregated_season_honours {
  year           Int?      @unique(map: "idx_season_honours_year")
  season_winners Json?
  top_scorers    Json?
  last_updated   DateTime? @default(now()) @db.Timestamptz(6)
  season_id      Int
  season_name    String?
  tenant_id      String    @db.Uuid
  seasons        seasons   @relation(fields: [season_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants        tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_season_honours_tenant")

  @@id([season_id, tenant_id], map: "pk_aggregated_season_honours")
  @@index([tenant_id, season_id], map: "idx_season_honours_tenant_season")
}

model aggregated_season_race_data {
  race_data_id Int      @id @default(autoincrement())
  season_year  Int
  player_data  Json
  last_updated DateTime @default(now()) @db.Timestamptz(6)
  period_type  String   @default("whole_season") @db.VarChar(20)
  season_id    Int?
  tenant_id    String   @db.Uuid
  seasons      seasons? @relation(fields: [season_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tenants      tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_season_race_data_tenant")

  @@unique([season_year, period_type], map: "idx_season_race_data_year_period")
  @@unique([tenant_id, season_year, period_type], map: "unique_season_race_data_per_tenant")
}

model aggregated_season_stats {
  id                Int      @id @default(autoincrement())
  player_id         Int
  season_start_date DateTime @db.Date
  season_end_date   DateTime @db.Date
  games_played      Int
  wins              Int
  draws             Int
  losses            Int
  goals             Int
  heavy_wins        Int
  heavy_losses      Int
  clean_sheets      Int
  win_percentage    Decimal  @db.Decimal(10, 1)
  fantasy_points    Decimal  @db.Decimal(10, 1)
  points_per_game   Decimal  @db.Decimal(10, 1)
  name              String?  @db.VarChar(14)
  selected_club     Json?
  last_updated      DateTime @default(now()) @db.Timestamptz(6)
  tenant_id         String   @db.Uuid
  players           players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  tenants           tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_aggregated_season_stats_tenant")

  @@unique([player_id, season_start_date, season_end_date])
  @@unique([tenant_id, player_id, season_start_date, season_end_date], map: "unique_season_stats_per_tenant")
  @@index([season_start_date, season_end_date], map: "idx_agg_season_stats_dates")
  @@index([tenant_id, player_id], map: "idx_aggregated_season_stats_tenant_player")
}

model app_config {
  config_id          Int       @id @default(autoincrement())
  config_key         String    @db.VarChar(255)
  config_value       String
  config_description String?
  config_group       String?   @db.VarChar(100)
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @db.Timestamptz(6)
  display_name       String?
  display_group      String?
  sort_order         Int?
  tenant_id          String    @db.Uuid
  tenants            tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_app_config_tenant")
}

model app_config_defaults {
  config_key         String  @id @db.VarChar(255)
  config_value       String
  config_description String?
  config_group       String  @db.VarChar(255)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model background_job_status {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  job_type      String    @default("stats_update")
  job_payload   Json
  status        String    @default("queued")
  started_at    DateTime? @db.Timestamptz(6)
  completed_at  DateTime? @db.Timestamptz(6)
  retry_count   Int       @default(0)
  priority      Int?      @default(1)
  tenant_id     String?   @db.Uuid
  error_message String?
  results       Json?
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  tenants       tenants?  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_background_job_status_tenant")

  @@index([created_at(sort: Desc)], map: "idx_background_job_status_created_at")
  @@index([job_type], map: "idx_background_job_status_job_type")
  @@index([status], map: "idx_background_job_status_status")
  @@index([tenant_id], map: "idx_background_job_status_tenant_id")
  @@index([tenant_id, status], map: "idx_background_job_status_tenant_status")
}

model cache_metadata {
  cache_key        String   @db.VarChar(100)
  last_invalidated DateTime @default(now()) @db.Timestamptz(6)
  dependency_type  String   @db.VarChar(50)
  tenant_id        String   @db.Uuid
  tenants          tenants  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_cache_metadata_tenant")

  @@id([cache_key, tenant_id])
}

model debug_logs {
  id        Int       @id @default(autoincrement())
  source    String?
  message   String?
  timestamp DateTime? @default(now()) @db.Timestamptz(6)
  tenant_id String    @db.Uuid
  tenants   tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_debug_logs_tenant")

  @@index([tenant_id, timestamp(sort: Desc)], map: "idx_debug_logs_tenant_timestamp")
}

model match_player_pool {
  id                     Int              @id @default(autoincrement())
  upcoming_match_id      Int
  player_id              Int
  response_status        String           @default("IN") @db.VarChar(20)
  response_timestamp     DateTime?        @default(now()) @db.Timestamptz(6)
  notification_sent      Boolean?         @default(false)
  notification_timestamp DateTime?        @db.Timestamptz(6)
  notes                  String?
  created_at             DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?        @default(now()) @db.Timestamptz(6)
  tenant_id              String           @db.Uuid
  tenants                tenants          @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_match_player_pool_tenant")
  players                players          @relation(fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  upcoming_matches       upcoming_matches @relation(fields: [upcoming_match_id], references: [upcoming_match_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([tenant_id, upcoming_match_id, player_id], map: "unique_match_player_per_tenant")
  @@index([upcoming_match_id], map: "idx_match_player_pool_match_id")
  @@index([player_id], map: "idx_match_player_pool_player_id")
  @@index([tenant_id, response_status], map: "idx_match_pool_tenant_status")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model matches {
  match_id                  Int                        @id @default(autoincrement())
  match_date                DateTime                   @db.Date
  team_a_score              Int
  team_b_score              Int
  created_at                DateTime?                  @default(now()) @db.Timestamp(6)
  upcoming_match_id         Int?
  team_a_own_goals          Int?                       @default(0)
  team_b_own_goals          Int?                       @default(0)
  season_id                 Int?
  tenant_id                 String                     @db.Uuid
  aggregated_personal_bests aggregated_personal_bests?
  tenants                   tenants                    @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_matches_tenant")
  upcoming_matches          upcoming_matches?          @relation(fields: [upcoming_match_id], references: [upcoming_match_id], map: "fk_matches_upcoming_match_id")
  seasons                   seasons?                   @relation(fields: [season_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  player_matches            player_matches[]

  @@index([match_date(sort: Desc), match_id(sort: Desc)], map: "idx_matches_match_date_desc")
  @@index([match_date, match_id], map: "idx_matches_match_date_match_id")
  @@index([season_id], map: "idx_matches_season_id")
  @@index([tenant_id, match_date], map: "idx_matches_tenant_date")
  @@index([upcoming_match_id], map: "idx_matches_upcoming_match_id")
}

model player_matches {
  player_match_id Int       @id @default(autoincrement())
  player_id       Int?
  match_id        Int?
  team            String?   @db.VarChar(20)
  goals           Int?      @default(0)
  clean_sheet     Boolean?  @default(false)
  heavy_win       Boolean?  @default(false)  // DEPRECATED: Calculated on-the-fly from goal_difference
  heavy_loss      Boolean?  @default(false)  // DEPRECATED: Calculated on-the-fly from goal_difference
  result          String?   @db.VarChar
  fantasy_points  Int?
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  tenant_id       String    @db.Uuid
  tenants         tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_player_matches_tenant")
  matches         matches?  @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  players         players?  @relation(fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([match_id, team], map: "idx_player_matches_match_id_team")
  @@index([player_id, match_id, goals], map: "idx_player_matches_player_match_composite")
  @@index([tenant_id, player_id], map: "idx_player_matches_tenant_player")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model players {
  player_id                                                                                         Int                               @id @default(autoincrement())
  name                                                                                              String                            @db.VarChar(14)
  join_date                                                                                         DateTime?                         @default(dbgenerated("CURRENT_DATE")) @db.Date
  is_ringer                                                                                         Boolean                           @default(false)
  is_retired                                                                                        Boolean?                          @default(false)
  goalscoring                                                                                       Int                               @default(3) @db.SmallInt
  defender                                                                                          Int                               @default(3) @db.SmallInt
  stamina_pace                                                                                      Int                               @default(3) @db.SmallInt
  control                                                                                           Int                               @default(3) @db.SmallInt
  teamwork                                                                                          Int                               @default(3) @db.SmallInt
  resilience                                                                                        Int?                              @default(3) @db.SmallInt
  selected_club                                                                                     Json?
  profile_text                                                                                      String?
  profile_generated_at                                                                              DateTime?                         @db.Timestamptz(6)
  auth_user_id                                                                                      String?                           @db.Uuid
  phone                                                                                             String?
  is_admin                                                                                          Boolean?                          @default(false)
  tenant_id                                                                                         String                            @db.Uuid
  aggregated_all_time_stats                                                                         aggregated_all_time_stats[]
  aggregated_half_season_stats                                                                      aggregated_half_season_stats[]
  aggregated_hall_of_fame                                                                           aggregated_hall_of_fame[]
  aggregated_match_streaks_aggregated_match_streaks_player_idToplayers                              aggregated_match_streaks?         @relation("aggregated_match_streaks_player_idToplayers")
  aggregated_match_streaks_aggregated_match_streaks_previous_half_season_fantasy_leader_idToplayers aggregated_match_streaks[]        @relation("aggregated_match_streaks_previous_half_season_fantasy_leader_idToplayers")
  aggregated_match_streaks_aggregated_match_streaks_previous_half_season_goals_leader_idToplayers   aggregated_match_streaks[]        @relation("aggregated_match_streaks_previous_half_season_goals_leader_idToplayers")
  aggregated_match_streaks_aggregated_match_streaks_previous_season_fantasy_leader_idToplayers      aggregated_match_streaks[]        @relation("aggregated_match_streaks_previous_season_fantasy_leader_idToplayers")
  aggregated_match_streaks_aggregated_match_streaks_previous_season_goals_leader_idToplayers        aggregated_match_streaks[]        @relation("aggregated_match_streaks_previous_season_goals_leader_idToplayers")
  aggregated_performance_ratings                                                                    aggregated_performance_ratings?
  aggregated_player_power_ratings                                                                   aggregated_player_power_ratings?
  aggregated_player_profile_stats                                                                   aggregated_player_profile_stats?
  aggregated_player_teammate_stats                                                                  aggregated_player_teammate_stats?
  aggregated_recent_performance                                                                     aggregated_recent_performance?
  aggregated_season_stats                                                                           aggregated_season_stats[]
  match_player_pool                                                                                 match_player_pool[]
  player_matches                                                                                    player_matches[]
  tenants                                                                                           tenants                           @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_players_tenant")
  team_slots                                                                                        team_slots[]
  upcoming_match_players                                                                            upcoming_match_players[]
  admin_profiles                                                                                    admin_profiles[]
  player_join_requests                                                                              player_join_requests[]

  @@unique([tenant_id, name], map: "unique_player_name_per_tenant")
  @@index([auth_user_id], map: "idx_players_auth_user")
  @@index([tenant_id, phone], map: "idx_players_phone")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This table contains exclusion constraints and requires additional setup for migrations. Visit https://pris.ly/d/exclusion-constraints for more info.
/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model seasons {
  id                          Int                           @id @default(autoincrement())
  start_date                  DateTime                      @db.Date
  half_date                   DateTime                      @db.Date
  end_date                    DateTime                      @db.Date
  created_at                  DateTime?                     @default(now()) @db.Timestamptz(6)
  updated_at                  DateTime?                     @default(now()) @db.Timestamptz(6)
  tenant_id                   String                        @db.Uuid
  aggregated_season_honours   aggregated_season_honours[]
  aggregated_season_race_data aggregated_season_race_data[]
  matches                     matches[]
  tenants                     tenants                       @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_seasons_tenant")

  @@index([tenant_id, start_date, end_date], map: "idx_seasons_tenant_dates")
}

model team_balance_weights {
  weight_id      Int       @id(map: "team_balance_weights_new_pkey") @default(autoincrement())
  position_group String    @db.VarChar(50)
  attribute      String    @db.VarChar(50)
  weight         Decimal   @db.Decimal(4, 2)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)
  tenant_id      String    @db.Uuid
  tenants        tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_team_balance_weights_tenant")

  @@unique([tenant_id, position_group, attribute], map: "unique_team_balance_weights_per_tenant")
}

model team_balance_weights_defaults {
  position_group String  @db.VarChar(50)
  attribute      String  @db.VarChar(50)
  weight         Decimal @db.Decimal(5, 4)

  @@id([position_group, attribute])
}

model team_size_templates {
  template_id Int       @id @default(autoincrement())
  team_size   Int
  name        String    @db.VarChar(100)
  defenders   Int
  midfielders Int
  attackers   Int
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  tenant_id   String    @db.Uuid
  tenants     tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_team_size_templates_tenant")

  @@index([tenant_id, team_size], map: "idx_team_size_templates_tenant_size")
}

model team_size_templates_defaults {
  team_size            Int     @id
  defenders_per_team   Int
  midfielders_per_team Int
  attackers_per_team   Int
  team_a_name          String  @db.VarChar(255)
  team_b_name          String  @db.VarChar(255)
  name                 String? @default(dbgenerated("(team_size || '-a-side'::text)")) @db.VarChar(255)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model team_slots {
  id          Int       @id @default(autoincrement())
  slot_number Int
  player_id   Int?
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
  tenant_id   String    @db.Uuid
  tenants     tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_team_slots_tenant")
  players     players?  @relation(fields: [player_id], references: [player_id], onUpdate: NoAction)

  @@unique([tenant_id, slot_number], map: "unique_slot_number_per_tenant")
  @@index([player_id], map: "idx_team_slots_player_id")
  @@index([tenant_id, slot_number], map: "idx_team_slots_tenant_slot")
}

model tenants {
  tenant_id                        String                             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  slug                             String                             @unique @db.VarChar(50)
  name                             String                             @db.VarChar(255)
  created_at                       DateTime?                          @default(now()) @db.Timestamptz(6)
  updated_at                       DateTime?                          @default(now()) @db.Timestamptz(6)
  is_active                        Boolean?                           @default(true)
  settings                         Json?                              @default("{}")
  aggregated_all_time_stats        aggregated_all_time_stats[]
  aggregated_half_season_stats     aggregated_half_season_stats[]
  aggregated_hall_of_fame          aggregated_hall_of_fame[]
  aggregated_match_report          aggregated_match_report[]
  aggregated_match_streaks         aggregated_match_streaks[]
  aggregated_performance_ratings   aggregated_performance_ratings[]
  aggregated_personal_bests        aggregated_personal_bests[]
  aggregated_player_power_ratings  aggregated_player_power_ratings[]
  aggregated_player_profile_stats  aggregated_player_profile_stats[]
  aggregated_player_teammate_stats aggregated_player_teammate_stats[]
  aggregated_recent_performance    aggregated_recent_performance[]
  aggregated_records               aggregated_records[]
  aggregated_season_honours        aggregated_season_honours[]
  aggregated_season_race_data      aggregated_season_race_data[]
  aggregated_season_stats          aggregated_season_stats[]
  app_config                       app_config[]
  background_job_status            background_job_status[]
  cache_metadata                   cache_metadata[]
  debug_logs                       debug_logs[]
  match_player_pool                match_player_pool[]
  matches                          matches[]
  player_matches                   player_matches[]
  players                          players[]
  seasons                          seasons[]
  team_balance_weights             team_balance_weights[]
  team_size_templates              team_size_templates[]
  team_slots                       team_slots[]
  upcoming_match_players           upcoming_match_players[]
  upcoming_matches                 upcoming_matches[]
  admin_profiles                   admin_profiles[]
  admin_invitations                admin_invitations[]
  auth_activity_log                auth_activity_log[]
  club_invite_tokens               club_invite_tokens[]
  player_join_requests             player_join_requests[]

  @@index([slug], map: "idx_tenants_slug")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model upcoming_match_players {
  upcoming_player_id Int              @id @default(autoincrement())
  upcoming_match_id  Int
  player_id          Int
  team               String           @db.VarChar(20)
  created_at         DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?        @default(now()) @db.Timestamptz(6)
  slot_number        Int?
  tenant_id          String           @db.Uuid
  tenants            tenants          @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_upcoming_match_players_tenant")
  players            players          @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  upcoming_matches   upcoming_matches @relation(fields: [upcoming_match_id], references: [upcoming_match_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([tenant_id, upcoming_match_id, team, slot_number], map: "unique_match_team_slot_per_tenant")
  @@unique([tenant_id, upcoming_match_id, player_id], map: "unique_upcoming_match_player_per_tenant")
  @@index([tenant_id, upcoming_match_id], map: "idx_upcoming_match_players_tenant_match")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model upcoming_matches {
  upcoming_match_id      Int                      @id @default(autoincrement())
  match_date             DateTime                 @db.Timestamptz(6)
  team_size              Int
  location               String?                  @db.VarChar(255)
  team_a_name            String?                  @default("Orange") @db.VarChar(100)
  team_b_name            String?                  @default("Green") @db.VarChar(100)
  notes                  String?
  is_completed           Boolean?                 @default(false)
  created_at             DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?                @default(now()) @db.Timestamptz(6)
  is_active              Boolean?                 @default(false)
  is_balanced            Boolean?                 @default(false)
  state                  match_state              @default(Draft)
  state_version          Int                      @default(0)
  actual_size_a          Int?
  actual_size_b          Int?
  tenant_id              String                   @db.Uuid
  match_player_pool      match_player_pool[]
  matches                matches[]
  upcoming_match_players upcoming_match_players[]
  tenants                tenants                  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_upcoming_matches_tenant")

  @@index([tenant_id, match_date], map: "idx_upcoming_matches_tenant_date")
}

enum match_state {
  Draft
  PoolLocked
  TeamsBalanced
  Completed
  Cancelled
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model admin_profiles {
  user_id         String    @id @db.Uuid
  tenant_id       String?   @db.Uuid
  user_role       String
  display_name    String
  player_id       Int?
  created_at      DateTime  @default(now()) @db.Timestamptz(6)
  updated_at      DateTime  @default(now()) @db.Timestamptz(6)
  last_login_at   DateTime? @db.Timestamptz(6)
  tenants         tenants?  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction)
  players         players?  @relation(fields: [player_id], references: [player_id], onDelete: SetNull, onUpdate: NoAction)

  @@index([tenant_id, user_role], map: "idx_admin_profiles_tenant_role")
  @@index([player_id], map: "idx_admin_profiles_player_id")
  @@unique([tenant_id, player_id], map: "idx_admin_profiles_unique_player")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model admin_invitations {
  id                    String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id             String    @db.Uuid
  email                 String
  invited_by            String    @db.Uuid
  invited_role          String
  player_id             Int?
  invitation_token_hash String    @unique
  expires_at            DateTime  @db.Timestamptz(6)
  status                String    @default("pending")
  accepted_by           String?   @db.Uuid
  accepted_at           DateTime? @db.Timestamptz(6)
  created_at            DateTime  @default(now()) @db.Timestamptz(6)
  tenants               tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([tenant_id, email, status], map: "unique_pending_invitation")
  @@index([invitation_token_hash], map: "idx_admin_invitations_token_hash")
  @@index([tenant_id, status], map: "idx_admin_invitations_tenant_status")
  @@index([email], map: "idx_admin_invitations_email")
  @@index([expires_at], map: "idx_admin_invitations_expires")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model auth_activity_log {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id          String?   @db.Uuid
  tenant_id        String?   @db.Uuid
  activity_type    String
  ip_address_hash  String?
  user_agent_hash  String?
  success          Boolean
  failure_reason   String?
  metadata         Json      @default("{}")
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  tenants          tenants?  @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([user_id, created_at(sort: Desc)], map: "idx_auth_activity_user")
  @@index([tenant_id, created_at(sort: Desc)], map: "idx_auth_activity_tenant")
  @@index([activity_type, success, created_at(sort: Desc)], map: "idx_auth_activity_type_success")
  @@index([created_at(sort: Desc)], map: "idx_auth_activity_created")
}

model club_invite_tokens {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id   String    @db.Uuid
  invite_code String    @unique
  created_by  String    @db.Uuid
  is_active   Boolean   @default(true)
  created_at  DateTime  @default(now()) @db.Timestamptz(6)
  expires_at  DateTime? @db.Timestamptz(6)
  tenants     tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade)

  @@unique([tenant_id, is_active], map: "unique_active_invite_per_tenant")
}

model player_join_requests {
  id               String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  tenant_id        String    @db.Uuid
  phone_number     String
  display_name     String?
  status           String    @default("pending")
  auth_user_id     String?   @db.Uuid
  approved_by      String?   @db.Uuid
  linked_player_id Int?
  created_at       DateTime  @default(now()) @db.Timestamptz(6)
  processed_at     DateTime? @db.Timestamptz(6)
  tenants          tenants   @relation(fields: [tenant_id], references: [tenant_id], onDelete: Cascade)
  players          players?  @relation(fields: [linked_player_id], references: [player_id], onDelete: SetNull)

  @@unique([tenant_id, phone_number, status])
}
