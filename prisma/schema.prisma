generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This table contains check constraints and requires additional setup for migrations. 
/// Visit https://pris.ly/d/check-constraints for more info.
model matches {
  match_id                  Int                        @id @default(autoincrement())
  match_date                DateTime                   @db.Date
  team_a_score              Int
  team_b_score              Int
  team_a_own_goals          Int?                       @default(0)
  team_b_own_goals          Int?                       @default(0)
  created_at                DateTime?                  @default(now()) @db.Timestamp(6)
  upcoming_match_id         Int?
  aggregated_personal_bests aggregated_personal_bests?
  leader_history            leader_history[]
  upcoming_matches          upcoming_matches?          @relation(fields: [upcoming_match_id], references: [upcoming_match_id], map: "fk_matches_upcoming_match_id")
  player_matches            player_matches[]

  @@index([upcoming_match_id], map: "idx_matches_upcoming_match_id")
}

/// This table contains check constraints and requires additional setup for migrations. 
/// Visit https://pris.ly/d/check-constraints for more info.
model player_matches {
  player_match_id Int       @id @default(autoincrement())
  player_id       Int?
  match_id        Int?
  team            String?   @db.VarChar(20)
  goals           Int?      @default(0)
  clean_sheet     Boolean?  @default(false)
  heavy_win       Boolean?  @default(false)
  heavy_loss      Boolean?  @default(false)
  result          String?   @db.VarChar
  fantasy_points  Int?
  updated_at      DateTime? @default(now()) @db.Timestamptz(6)
  matches         matches?  @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  players         players?  @relation(fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
}

model players {
  player_id                                                                                         Int                              @id @default(autoincrement())
  name                                                                                              String                           @unique(map: "unique_player_name") @db.VarChar(14)
  join_date                                                                                         DateTime?                        @default(dbgenerated("CURRENT_DATE")) @db.Date
  is_ringer                                                                                         Boolean                          @default(false)
  is_retired                                                                                        Boolean?                         @default(false)
  goalscoring                                                                                       Int                              @default(3) @db.SmallInt
  defender                                                                                          Int                              @default(3) @db.SmallInt
  stamina_pace                                                                                      Int                              @default(3) @db.SmallInt
  control                                                                                           Int                              @default(3) @db.SmallInt
  teamwork                                                                                          Int                              @default(3) @db.SmallInt
  resilience                                                                                        Int?                             @default(3) @db.SmallInt
  selected_club                                                                                     Json?
  all_time_stats                                                                                    aggregated_all_time_stats?
  half_season_stats                                                                                 aggregated_half_season_stats?
  hall_of_fame                                                                                      aggregated_hall_of_fame[]

  aggregated_player_power_ratings                                                                   aggregated_player_power_ratings?
  aggregated_player_profile_stats                                                                   aggregated_player_profile_stats?
  recent_performance                                                                                aggregated_recent_performance?
  season_stats                                                                                      aggregated_season_stats[]
  leader_history_leader_history_new_leader_idToplayers                                              leader_history[]                 @relation("leader_history_new_leader_idToplayers")
  leader_history_leader_history_previous_leader_idToplayers                                         leader_history[]                 @relation("leader_history_previous_leader_idToplayers")
  match_player_pool                                                                                 match_player_pool[]
  player_matches                                                                                    player_matches[]
  team_slots                                                                                        team_slots[]
  upcoming_match_players                                                                            upcoming_match_players[]
}

model team_slots {
  id          Int       @id @default(autoincrement())
  slot_number Int       @unique(map: "unique_slot_number")
  player_id   Int?
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  player      players?  @relation(fields: [player_id], references: [player_id], onUpdate: NoAction)

  @@index([player_id], map: "idx_team_slots_player_id")
}

/// This model represents app configuration settings
/// Visit https://pris.ly/d/check-constraints for more info about check constraints.
model app_config {
  config_id          Int       @id @default(autoincrement())
  config_key         String    @unique(map: "app_config_config_key_unique") @db.VarChar(255)
  config_value       String
  config_description String?
  config_group       String?   @db.VarChar(100)
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @db.Timestamptz(6)
  display_name       String?
  display_group      String?
  sort_order         Int?
}

/// This model represents app configuration default settings
model app_config_defaults {
  config_key         String  @id @db.VarChar(255)
  config_value       String
  config_description String?
  config_group       String  @db.VarChar(255)
}

/// This model represents team size templates
/// Visit https://pris.ly/d/check-constraints for more info about check constraints.
model team_size_templates {
  template_id Int       @id @default(autoincrement())
  team_size   Int
  name        String    @db.VarChar(100)
  defenders   Int
  midfielders Int
  attackers   Int
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
}

/// This model represents team size template defaults
model team_size_templates_defaults {
  team_size            Int     @id
  defenders_per_team   Int
  midfielders_per_team Int
  attackers_per_team   Int
  team_a_name          String  @db.VarChar(255)
  team_b_name          String  @db.VarChar(255)
  name                 String? @default(dbgenerated("(team_size || '-a-side'::text)")) @db.VarChar(255)
}

/// This model represents balance algorithm weights for team templates
/// Visit https://pris.ly/d/check-constraints for more info about check constraints.
model team_balance_weights {
  weight_id      Int       @id(map: "team_balance_weights_new_pkey") @default(autoincrement())
  position_group String    @db.VarChar(50)
  attribute      String    @db.VarChar(50)
  weight         Decimal   @db.Decimal(4, 2)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([position_group, attribute], map: "team_balance_weights_new_position_group_attribute_key")
}

/// This model represents balance algorithm weight defaults
model team_balance_weights_defaults {
  position_group String  @db.VarChar(50)
  attribute      String  @db.VarChar(50)
  weight         Decimal @db.Decimal(5, 4)

  @@id([position_group, attribute])
}

/// This model represents upcoming matches
/// Visit https://pris.ly/d/check-constraints for more info about check constraints.
model upcoming_matches {
  upcoming_match_id Int                      @id @default(autoincrement())
  match_date        DateTime                 @db.Timestamptz(6)
  team_size         Int
  location          String?                  @db.VarChar(255)
  team_a_name       String?                  @default("Orange") @db.VarChar(100)
  team_b_name       String?                  @default("Green") @db.VarChar(100)
  notes             String?
  is_completed      Boolean?                 @default(false)
  created_at        DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?                @default(now()) @db.Timestamptz(6)
  is_active         Boolean?                 @default(false)
  is_balanced       Boolean?                 @default(false)
  state             match_state              @default(Draft)
  state_version     Int                      @default(0)
  player_pool       match_player_pool[]
  matches           matches[]
  players           upcoming_match_players[]

  @@index([is_active], map: "idx_upcoming_matches_active")
}

/// This model represents players assigned to upcoming matches
/// Visit https://pris.ly/d/check-constraints for more info about check constraints.
model upcoming_match_players {
  upcoming_player_id Int              @id @default(autoincrement())
  upcoming_match_id  Int
  player_id          Int
  team               String           @db.VarChar(20)
  created_at         DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?        @default(now()) @db.Timestamptz(6)
  slot_number        Int?
  player             players          @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  match              upcoming_matches @relation(fields: [upcoming_match_id], references: [upcoming_match_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model represents the player pool for upcoming matches
/// It tracks which players are available or unavailable for a match
model match_player_pool {
  id                     Int              @id @default(autoincrement())
  upcoming_match_id      Int
  player_id              Int
  response_status        String           @default("IN") @db.VarChar(20)
  response_timestamp     DateTime?        @default(now()) @db.Timestamptz(6)
  notification_sent      Boolean?         @default(false)
  notification_timestamp DateTime?        @db.Timestamptz(6)
  notes                  String?
  created_at             DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at             DateTime?        @default(now()) @db.Timestamptz(6)
  player                 players          @relation(fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  match                  upcoming_matches @relation(fields: [upcoming_match_id], references: [upcoming_match_id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([upcoming_match_id, player_id])
  @@index([upcoming_match_id], map: "idx_match_player_pool_match_id")
  @@index([player_id], map: "idx_match_player_pool_player_id")
}

/// This model stores pre-aggregated season stats for faster retrieval
model aggregated_season_stats {
  id                Int      @id @default(autoincrement())
  player_id         Int
  season_start_date DateTime @db.Date
  season_end_date   DateTime @db.Date
  games_played      Int
  wins              Int
  draws             Int
  losses            Int
  goals             Int
  heavy_wins        Int
  heavy_losses      Int
  clean_sheets      Int
  win_percentage    Decimal  @db.Decimal(10, 1)
  fantasy_points    Decimal  @db.Decimal(10, 1)
  points_per_game   Decimal  @db.Decimal(10, 1)
  last_updated      DateTime @default(now()) @db.Timestamptz(6)
  player            players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([player_id, season_start_date, season_end_date])
  @@index([season_start_date, season_end_date], map: "idx_agg_season_stats_dates")
}

/// This model stores pre-aggregated half-season stats for faster retrieval
model aggregated_half_season_stats {
  id              Int       @id @default(autoincrement())
  player_id       Int?      @unique
  games_played    Int?
  wins            Int?
  draws           Int?
  losses          Int?
  goals           Int?
  heavy_wins      Int?
  heavy_losses    Int?
  clean_sheets    Int?
  win_percentage  Decimal?  @db.Decimal(10, 1)
  fantasy_points  Int?
  points_per_game Decimal?  @db.Decimal(10, 1)
  last_updated    DateTime? @default(now()) @db.Timestamptz(6)
  player          players?  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_player")

  @@index([player_id], map: "idx_agg_half_season_stats_player_id")
}

/// This model stores pre-aggregated all-time stats for faster retrieval
model aggregated_all_time_stats {
  id                     Int      @id @default(autoincrement())
  player_id              Int      @unique
  games_played           Int
  wins                   Int
  draws                  Int
  losses                 Int
  goals                  Int
  win_percentage         Decimal  @db.Decimal(10, 1)
  minutes_per_goal       Decimal? @db.Decimal(10, 1)
  heavy_wins             Int
  heavy_win_percentage   Decimal  @db.Decimal(10, 1)
  heavy_losses           Int
  heavy_loss_percentage  Decimal  @db.Decimal(10, 1)
  clean_sheets           Int
  clean_sheet_percentage Decimal  @db.Decimal(10, 1)
  fantasy_points         Decimal  @db.Decimal(10, 1)
  points_per_game        Decimal  @db.Decimal(10, 1)
  last_updated           DateTime @default(now()) @db.Timestamptz(6)
  player                 players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model stores pre-aggregated hall of fame data
model aggregated_hall_of_fame {
  id           Int      @id @default(autoincrement())
  category     String   @db.VarChar(50)
  player_id    Int
  value        Decimal  @db.Decimal(10, 2)
  last_updated DateTime @default(now()) @db.Timestamptz(6)
  player       players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([category, player_id])
  @@index([category], map: "idx_agg_hall_of_fame_category")
}

/// This model stores cache invalidation metadata
model cache_metadata {
  cache_key        String   @id @db.VarChar(100)
  last_invalidated DateTime @default(now()) @db.Timestamptz(6)
  dependency_type  String   @db.VarChar(50)
}

model aggregated_recent_performance {
  player_id    Int       @id
  last_5_games Json?
  last_5_goals Int?
  last_updated DateTime? @default(now()) @db.Timestamptz(6)
  player       players   @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model stores cached match report data for faster retrieval
model aggregated_match_report {
  match_id                    Int       @id
  match_date                  DateTime? @db.Timestamptz(6)
  team_a_score                Int?
  team_b_score                Int?
  team_a_players              Json?
  team_b_players              Json?
  team_a_scorers              String?
  team_b_scorers              String?
  game_milestones             Json?
  goal_milestones             Json?
  config_values               Json?
  last_updated                DateTime? @default(now()) @db.Timestamptz(6)
  half_season_goal_leaders    Json?
  half_season_fantasy_leaders Json?
  season_goal_leaders         Json?
  season_fantasy_leaders      Json?
  on_fire_player_id           Int?
  grim_reaper_player_id       Int?
  feat_breaking_data          Json?     @default("[]")
  streaks                     Json?     @default("[]")
  goal_streaks                Json?     @default("[]")
}



/// This model stores aggregated records and achievements
model aggregated_records {
  id           Int       @id @default(autoincrement())
  records      Json?
  last_updated DateTime? @default(now()) @db.Timestamptz(6)
}

/// This model stores season honours and achievements
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model aggregated_season_honours {
  year           Int?      @unique(map: "idx_season_honours_year")
  season_winners Json?
  top_scorers    Json?
  last_updated   DateTime? @default(now()) @db.Timestamptz(6)

  @@ignore
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model aggregated_personal_bests {
  match_id        Int      @id
  broken_pbs_data Json
  created_at      DateTime @default(now()) @db.Timestamptz(6)
  updated_at      DateTime @default(now()) @db.Timestamptz(6)
  matches         matches  @relation(fields: [match_id], references: [match_id], onDelete: Cascade, onUpdate: NoAction, map: "fk_match")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model leader_history {
  id                                                 Int       @id @default(autoincrement())
  match_id                                           Int
  leader_type                                        String    @db.VarChar(50)
  new_leader_id                                      Int?
  previous_leader_id                                 Int?
  new_leader_value                                   Int?
  previous_leader_value                              Int?
  change_type                                        String?   @db.VarChar(20)
  created_at                                         DateTime? @default(now()) @db.Timestamptz(6)
  matches                                            matches   @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  players_leader_history_new_leader_idToplayers      players?  @relation("leader_history_new_leader_idToplayers", fields: [new_leader_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  players_leader_history_previous_leader_idToplayers players?  @relation("leader_history_previous_leader_idToplayers", fields: [previous_leader_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([match_id], map: "idx_leader_history_match")
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model process_state {
  id               String    @id
  is_running       Boolean?  @default(false)
  request_id       String?
  current_step     String?
  completed_steps  String[]  @default([])
  error            String?
  start_time       DateTime? @db.Timestamp(6)
  last_update_time DateTime? @db.Timestamp(6)
  step_attempts    Json?     @default("{}")
}

model aggregated_player_power_ratings {
  player_id        Int      @id
  rating           Decimal  @db.Decimal
  variance         Decimal  @db.Decimal
  effective_games  Decimal  @db.Decimal
  updated_at       DateTime @default(now()) @db.Timestamptz(6)
  goal_threat      Decimal? @db.Decimal
  defensive_shield Decimal? @db.Decimal
  players          players  @relation(fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)

  @@index([rating(sort: Desc)], map: "idx_power_rating_desc")
}

model aggregated_player_profile_stats {
  player_id                      Int      @id @map("player_id")
  name                           String?
  games_played                   Int?     @default(0)
  fantasy_points                 Int?     @default(0)
  most_game_goals                Int?
  most_game_goals_date           String?
  most_season_goals              Int?
  most_season_goals_year         String?
  win_streak                     Int?     @default(0)
  win_streak_dates               String?
  losing_streak                  Int?     @default(0)
  losing_streak_dates            String?
  undefeated_streak              Int?     @default(0)
  undefeated_streak_dates        String?
  winless_streak                 Int?     @default(0)
  winless_streak_dates           String?
  scoring_streak                 Int?     @default(0)
  scoring_streak_dates           String?
  attendance_streak              Int?     @default(0)
  attendance_streak_dates        String?
  selected_club                  Json?
  yearly_stats                   Json?    @default("[]")
  teammate_chemistry_all         Json?    @default("[]")
  last_updated                   DateTime @default(now()) @db.Timestamptz(6)
  player                         players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)

  @@map("aggregated_player_profile_stats")
}

/// This model stores pre-aggregated season race data for faster retrieval
model aggregated_season_race_data {
  race_data_id Int      @id @default(autoincrement())
  season_year  Int
  period_type  String   @default("whole_season") @db.VarChar(20)
  player_data  Json
  last_updated DateTime @default(now()) @db.Timestamptz(6)

  @@unique([season_year, period_type], map: "idx_season_race_data_year_period")
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model matches_backup {
  match_id     Int?
  match_date   DateTime? @db.Date
  team_a_score Int?
  team_b_score Int?
  created_at   DateTime? @db.Timestamp(6)

  @@ignore
}

/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model upcoming_matches_backup {
  upcoming_match_id Int?
  match_date        DateTime? @db.Timestamptz(6)
  team_size         Int?
  location          String?   @db.VarChar(255)
  team_a_name       String?   @db.VarChar(100)
  team_b_name       String?   @db.VarChar(100)
  notes             String?
  is_completed      Boolean?
  created_at        DateTime? @db.Timestamptz(6)
  updated_at        DateTime? @db.Timestamptz(6)
  is_active         Boolean?
  is_balanced       Boolean?

  @@ignore
}

enum match_state {
  Draft
  PoolLocked
  TeamsBalanced
  Completed
  Cancelled
}
