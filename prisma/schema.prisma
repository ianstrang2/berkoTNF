generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/// This table contains check constraints and requires additional setup for migrations. 
/// Visit https://pris.ly/d/check-constraints for more info.
model matches {
  match_id       Int              @id @default(autoincrement())
  match_date     DateTime         @db.Date
  team_a_score   Int
  team_b_score   Int
  created_at     DateTime?        @default(now()) @db.Timestamp(6)
  player_matches player_matches[]
}

/// This table contains check constraints and requires additional setup for migrations. 
/// Visit https://pris.ly/d/check-constraints for more info.
model player_matches {
  player_match_id Int      @id @default(autoincrement())
  player_id       Int?
  match_id        Int?
  team            String?  @db.Char(1)
  goals           Int?     @default(0)
  clean_sheet     Boolean? @default(false)
  heavy_win       Boolean? @default(false)
  heavy_loss      Boolean? @default(false)
  result          String?  @db.VarChar
  fantasy_points  Int?
  matches         matches? @relation(fields: [match_id], references: [match_id], onDelete: NoAction, onUpdate: NoAction)
  players         players? @relation(fields: [player_id], references: [player_id], onDelete: NoAction, onUpdate: NoAction)
  updated_at      DateTime @updatedAt @default(now())
}

model players {
  player_id                Int                            @id @default(autoincrement())
  name                     String                         @db.VarChar(100)
  join_date                DateTime?                      @default(dbgenerated("CURRENT_DATE")) @db.Date
  is_ringer                Boolean                        @default(false)
  is_retired               Boolean?                       @default(false)
  goalscoring              Int                            @default(3) @db.SmallInt
  defender                 Int                            @default(3) @db.SmallInt
  stamina_pace             Int                            @default(3) @db.SmallInt
  control                  Int                            @default(3) @db.SmallInt
  teamwork                 Int                            @default(3) @db.SmallInt
  resilience               Int?                           @default(3) @db.SmallInt
  all_time_stats           aggregated_all_time_stats?
  hall_of_fame             aggregated_hall_of_fame[]
  aggregated_match_streaks aggregated_match_streaks[]
  recent_performance       aggregated_recent_performance?
  season_stats             aggregated_season_stats[]
  half_season_stats        aggregated_half_season_stats?
  player_matches           player_matches[]
  team_slots               team_slots[]
  upcoming_match_players   upcoming_match_players[]
  match_player_pool        match_player_pool[]
}

model team_slots {
  id          Int       @id @default(autoincrement())
  slot_number Int       @unique(map: "unique_slot_number")
  player_id   Int?
  updated_at  DateTime? @default(now()) @updatedAt @db.Timestamptz(6)
  player      players?  @relation(fields: [player_id], references: [player_id], onUpdate: NoAction)

  @@index([player_id], map: "idx_team_slots_player_id")
}

/// This model represents app configuration settings
/// Visit https://pris.ly/d/check-constraints for more info about check constraints.
model app_config {
  config_id          Int       @id @default(autoincrement())
  config_key         String    @db.VarChar(255)
  config_value       String
  config_description String?
  config_group       String?   @db.VarChar(100)
  created_at         DateTime? @default(now()) @db.Timestamptz(6)
  updated_at         DateTime? @default(now()) @db.Timestamptz(6)
}

/// This model represents app configuration default settings
model app_config_defaults {
  config_key         String  @id @db.VarChar(255)
  config_value       String
  config_description String?
  config_group       String  @db.VarChar(255)
}

/// This model represents team size templates
/// Visit https://pris.ly/d/check-constraints for more info about check constraints.
model team_size_templates {
  template_id Int       @id @default(autoincrement())
  team_size   Int
  name        String    @db.VarChar(100)
  defenders   Int
  midfielders Int
  attackers   Int
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
}

/// This model represents team size template defaults
model team_size_templates_defaults {
  team_size            Int     @id
  defenders_per_team   Int
  midfielders_per_team Int
  attackers_per_team   Int
  team_a_name          String  @db.VarChar(255)
  team_b_name          String  @db.VarChar(255)
  name                 String? @default(dbgenerated("(team_size || '-a-side'::text)")) @db.VarChar(255)
}

/// This model represents balance algorithm weights for team templates
/// Visit https://pris.ly/d/check-constraints for more info about check constraints.
model team_balance_weights {
  weight_id      Int       @id(map: "team_balance_weights_new_pkey") @default(autoincrement())
  position_group String    @db.VarChar(50)
  attribute      String    @db.VarChar(50)
  weight         Decimal   @db.Decimal(4, 2)
  created_at     DateTime? @default(now()) @db.Timestamptz(6)
  updated_at     DateTime? @default(now()) @db.Timestamptz(6)

  @@unique([position_group, attribute], map: "team_balance_weights_new_position_group_attribute_key")
}

/// This model represents balance algorithm weight defaults
model team_balance_weights_defaults {
  position_group String  @db.VarChar(50)
  attribute      String  @db.VarChar(50)
  weight         Decimal @db.Decimal(5, 4)

  @@id([position_group, attribute])
}

/// This model represents upcoming matches
/// Visit https://pris.ly/d/check-constraints for more info about check constraints.
model upcoming_matches {
  upcoming_match_id Int                      @id @default(autoincrement())
  match_date        DateTime                 @db.Timestamptz(6)
  team_size         Int
  location          String?                  @db.VarChar(255)
  team_a_name       String?                  @default("Orange") @db.VarChar(100)
  team_b_name       String?                  @default("Green") @db.VarChar(100)
  notes             String?
  is_completed      Boolean?                 @default(false)
  created_at        DateTime?                @default(now()) @db.Timestamptz(6)
  updated_at        DateTime?                @default(now()) @db.Timestamptz(6)
  is_active         Boolean?                 @default(false)
  is_balanced       Boolean?                 @default(false)
  players           upcoming_match_players[]
  player_pool       match_player_pool[]

  @@index([is_active], map: "idx_upcoming_matches_active")
}

/// This model represents players assigned to upcoming matches
/// Visit https://pris.ly/d/check-constraints for more info about check constraints.
model upcoming_match_players {
  upcoming_player_id Int              @id @default(autoincrement())
  upcoming_match_id  Int
  player_id          Int
  team               String           @db.Char(1)
  created_at         DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at         DateTime?        @default(now()) @db.Timestamptz(6)
  slot_number        Int?
  player             players          @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
  match              upcoming_matches @relation(fields: [upcoming_match_id], references: [upcoming_match_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model represents the player pool for upcoming matches
/// It tracks which players are available or unavailable for a match
model match_player_pool {
  id                   Int              @id @default(autoincrement())
  upcoming_match_id    Int
  player_id            Int
  response_status      String           @default("IN") @db.VarChar(20)
  response_timestamp   DateTime         @default(now()) @db.Timestamptz(6)
  notification_sent    Boolean          @default(false)
  notification_timestamp DateTime?      @db.Timestamptz(6)
  notes                String?
  created_at           DateTime         @default(now()) @db.Timestamptz(6)
  updated_at           DateTime         @default(now()) @db.Timestamptz(6)
  player               players          @relation(fields: [player_id], references: [player_id], onDelete: Cascade)
  match                upcoming_matches @relation(fields: [upcoming_match_id], references: [upcoming_match_id], onDelete: Cascade)

  @@unique([upcoming_match_id, player_id])
  @@index([upcoming_match_id])
  @@index([player_id])
}

/// This model stores pre-aggregated season stats for faster retrieval
model aggregated_season_stats {
  id                Int      @id @default(autoincrement())
  player_id         Int
  season_start_date DateTime @db.Date
  season_end_date   DateTime @db.Date
  games_played      Int
  wins              Int
  draws             Int
  losses            Int
  goals             Int
  heavy_wins        Int
  heavy_losses      Int
  clean_sheets      Int
  win_percentage    Decimal  @db.Decimal(10, 1)
  fantasy_points    Decimal  @db.Decimal(10, 1)
  points_per_game   Decimal  @db.Decimal(10, 1)
  last_updated      DateTime @default(now()) @db.Timestamptz(6)
  player            players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([player_id, season_start_date, season_end_date])
  @@index([season_start_date, season_end_date], map: "idx_agg_season_stats_dates")
}

/// This model stores pre-aggregated half-season stats for faster retrieval
model aggregated_half_season_stats {
  id               Int      @id @default(autoincrement())
  player_id        Int      @unique
  games_played     Int
  wins             Int
  draws            Int
  losses           Int
  goals            Int
  heavy_wins       Int
  heavy_losses     Int
  clean_sheets     Int
  win_percentage   Decimal  @db.Decimal(10, 1)
  fantasy_points   Int
  points_per_game  Decimal  @db.Decimal(10, 1)
  last_updated     DateTime @default(now()) @db.Timestamptz(6)
  player           players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)

  @@index([player_id], map: "idx_agg_half_season_stats_player_id")
}

/// This model stores pre-aggregated all-time stats for faster retrieval
model aggregated_all_time_stats {
  id                     Int      @id @default(autoincrement())
  player_id              Int      @unique
  games_played           Int
  wins                   Int
  draws                  Int
  losses                 Int
  goals                  Int
  win_percentage         Decimal  @db.Decimal(10, 1)
  minutes_per_goal       Decimal? @db.Decimal(10, 1)
  heavy_wins             Int
  heavy_win_percentage   Decimal  @db.Decimal(10, 1)
  heavy_losses           Int
  heavy_loss_percentage  Decimal  @db.Decimal(10, 1)
  clean_sheets           Int
  clean_sheet_percentage Decimal  @db.Decimal(10, 1)
  fantasy_points         Decimal  @db.Decimal(10, 1)
  points_per_game        Decimal  @db.Decimal(10, 1)
  last_updated           DateTime @default(now()) @db.Timestamptz(6)
  player                 players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model stores pre-aggregated hall of fame data
model aggregated_hall_of_fame {
  id           Int      @id @default(autoincrement())
  category     String   @db.VarChar(50)
  player_id    Int
  value        Decimal  @db.Decimal(10, 2)
  last_updated DateTime @default(now()) @db.Timestamptz(6)
  player       players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([category, player_id])
  @@index([category], map: "idx_agg_hall_of_fame_category")
}

/// This model stores cache invalidation metadata
model cache_metadata {
  cache_key        String   @id @db.VarChar(100)
  last_invalidated DateTime @default(now()) @db.Timestamptz(6)
  dependency_type  String   @db.VarChar(50)
}

model aggregated_recent_performance {
  player_id    Int      @id
  last_5_games Json?    @db.JsonB
  last_5_goals Int?     @db.Integer
  last_updated DateTime @default(now()) @db.Timestamptz(6)
  player       players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade)

  @@index([player_id])
}

/// This model stores cached match report data for faster retrieval
model aggregated_match_report {
  match_id                     Int       @id
  match_date                   DateTime  @db.Timestamptz
  team_a_score                 Int
  team_b_score                 Int
  team_a_players               Json?     @db.JsonB  // Array of player names
  team_b_players               Json?     @db.JsonB  // Array of player names
  team_a_scorers               String?   // Text field with comma-separated player names and goals
  team_b_scorers               String?   // Text field with comma-separated player names and goals
  game_milestones              Json?     @db.JsonB  // Array of {name: string, total_games: number}
  goal_milestones              Json?     @db.JsonB  // Array of {name: string, total_goals: number}
  config_values                Json?     @db.JsonB  // Object containing threshold values as strings
  half_season_goal_leaders     Json?     @db.JsonB
  half_season_fantasy_leaders  Json?     @db.JsonB
  season_goal_leaders          Json?     @db.JsonB
  season_fantasy_leaders       Json?     @db.JsonB
  last_updated                 DateTime  @default(now()) @db.Timestamptz

  @@index([match_date])
}

/// This model stores cached player streak data for match reports
model aggregated_match_streaks {
  player_id                         Int      @id
  name                             String?
  current_win_streak               Int?
  current_unbeaten_streak          Int?
  current_loss_streak              Int?
  current_winless_streak           Int?
  current_scoring_streak           Int?
  goals_in_scoring_streak          Int?
  half_season_goals                Int?
  half_season_fantasy_points       Int?
  season_goals                     Int?
  season_fantasy_points           Int?
  config_values                    Json?    @db.JsonB
  last_updated                     DateTime @default(now()) @db.Timestamptz(6)
  half_season_goals_rank           Int?
  half_season_fantasy_rank         Int?
  season_goals_rank                Int?
  season_fantasy_rank              Int?
  previous_half_season_goals       Int?
  previous_half_season_fantasy     Int?
  previous_season_goals            Int?
  previous_season_fantasy          Int?
  half_season_goals_status         String?
  half_season_fantasy_status       String?
  season_goals_status             String?
  season_fantasy_status           String?
  previous_half_season_goals_leader_id Int?
  previous_half_season_fantasy_leader_id Int?
  previous_season_goals_leader_id Int?
  previous_season_fantasy_leader_id Int?
  player                           players  @relation(fields: [player_id], references: [player_id], onDelete: Cascade)

  @@index([current_win_streak])
  @@index([current_unbeaten_streak])
  @@index([current_scoring_streak])
}

/// This model stores aggregated records and achievements
model aggregated_records {
  id           Int       @id @default(autoincrement())
  records      Json?     @db.JsonB  // Object containing various records
  last_updated DateTime  @default(now()) @db.Timestamptz(6)
}

/// This model stores season honours and achievements
model aggregated_season_honours {
  year           Int      @id
  season_winners Json?    @db.JsonB  // Array of {player_id: number, name: string, value: number}
  top_scorers    Json?    @db.JsonB  // Array of {player_id: number, name: string, goals: number}
  last_updated   DateTime @default(now()) @db.Timestamptz(6)

  @@index([year])
}
